<?xml version="1.0" encoding="UTF-8"?>
<!-- Brightcove BEML "Runtime"  -->

<!-- common attribute definitions-->

<!-- @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr visible Whether the component should be visible.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
-->
<!ENTITY % common.component.attributes 
    "height CDATA #IMPLIED
    id ID #IMPLIED
    includeInLayout CDATA 'true'
    visible CDATA 'true'
    width CDATA #IMPLIED
    x CDATA #IMPLIED
    y CDATA #IMPLIED"
>
<!-- @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
-->
<!ENTITY % uicomponent.attributes 
    " %common.component.attributes;
    theme CDATA #IMPLIED
    style CDATA #IMPLIED
    styleFile CDATA #IMPLIED"
>

<!-- @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
-->
<!ENTITY % sprite.attributes 
    " %uicomponent.attributes;
    alpha CDATA '1'
    blendMode CDATA 'normal'
    depth CDATA #IMPLIED
    enabled CDATA 'true'
    rotation CDATA '0'"
>



<!-- @root Runtime is the root element for the BEML RT DTD. -->
<!-- The root element. -->
<!ELEMENT Runtime (Modules|Theme|Labels|Layout)+>



<!-- top level nodes other than the Layout-->
<!ELEMENT Modules (Module)+>
<!--Enables loading a custom module.-->
<!ELEMENT Module (param)*>
<!-- @attr file The URL of a SWF file for a custom component.
     @attr id The id of the module to target through the API.
     @attr required Whether successful loading of the module is required before loading the player. 
     @attr hash The SHA1 hash value for the file for the custom component.
     @attr blocking Whether the player needs to wait for the module to load or not before loading itself.
             This attribute is only available for HTML players and requires that the module "registers" with the player using 
             brightcove.api.registerBlockingPlugin to acknowledge that it has loaded successfully.
-->
<!ATTLIST Module 
    file CDATA #REQUIRED
    id CDATA #IMPLIED
    required (true | false) 'false'
    hash CDATA #IMPLIED
    blocking (true | false) 'false'
>
<!-- A name/value pair that will be passed to the custom module. -->
<!ELEMENT param EMPTY>
<!-- @attr name The name of the custom parameter to pass to the module. -->
<!-- @attr value The value of the custom parameter to pass to the module. -->
<!ATTLIST param
    name CDATA #REQUIRED
    value CDATA #REQUIRED
>
    
<!-- Sets a theme and style for all visual components that allow for configurable themes and styles. -->
<!ELEMENT Theme (Style | Font)*>

<!-- @attr name The overall theme.
     @attr style The overall style.
     @attr bodyFont The font face for body text.
     @attr titleFont The font face for title text.
     @attr linkFont The font face for link text. -->

<!ATTLIST Theme
    name CDATA #IMPLIED
    style CDATA #IMPLIED
    bodyFont CDATA #IMPLIED
    titleFont CDATA #IMPLIED
    linkFont CDATA #IMPLIED
>
<!-- Sets a style for a single component identified by the id attribute, or for all
the components of a class identified by the class attribute. A Style element contains
PCDATA with the CSS required to set the style for the component. 

@example 
%<Style id="mainTitle" >
    <![CDATA[
      .body {
        color: #777777;
    }
    ]]>
</Style>% -->
<!ELEMENT Style (#PCDATA)>
<!-- @attr id The id attribute of an instance of a component for which you want to set the style. 
Use id="default" to override the default style. -->
<!ATTLIST Style
    id CDATA #IMPLIED
    class CDATA #IMPLIED
>

<!-- Instructs the player to load in a font file containing an embedded font that can be applied to any textfields in the player. 

@example 
%<Font name="Gotham Medium" />% -->
<!ELEMENT Font (#PCDATA)>
<!-- @attr name The name of the font file that should be loaded by the player for use with embedded fonts. -->
<!ATTLIST Font
    name CDATA #REQUIRED
>

<!-- Contains either the path to an XML file that contains the labels to be used for a player,
 individual overrides of labels within a player, or both.-->
<!ELEMENT Labels (label)*>

<!-- @attr file The URL of a label set XML file. -->
<!ATTLIST Labels
    file CDATA #IMPLIED
>
<!-- The label element's PCDATA contains the text for the label.-->
<!ELEMENT label (#PCDATA)>
<!-- @attr key The name of the label whose text you are setting. -->
<!ATTLIST label 
    key CDATA #REQUIRED>

<!-- LayoutBoxes, including root layout element-->

<!-- The Layout element is the top-level container for all the layout boxes and UI components in the player. By default, it acts as a Canvas. You can use the boxType attribute to specify that the Layout element should instead act as a VBox or HBox. -->
<!ELEMENT Layout (ViewStack | Canvas | HBox | VBox | Grid | AudioPlayer | VideoPlayer | VideoDisplay | ChromelessVideoPlayer | MediaControls | TextRegion | GraphicBlock | Label | Image | Link | Button | LiveButton | ToggleButton | ThumbnailButton | TitleLabel | ComboBox | List | TileList | TabBar | Banner | ExpandingBanner | Spacer | SWFLoader)*>
<!-- @attr backgroundColor Background color for the Layout. Child elements are rendered over the background color. 
     @attr backgroundImage Background image for the Layout. Child elements are rendered over the background image.
     @attr boxType The type of layout box. If this element has multiple child elements, this attribute indicates whether the children are arranged vertically (vbox) or horizontally (hbox).
     @attr gutter The pixel space between child elements; only applicable if the boxType is "hbox" or "vbox."
     @attr hAlign Horizontal alignment.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr padding The pixel padding within the borders of the box, from which all positioning is made.
     @attr vAlign Vertical alignment.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr visible Whether the component should be visible.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
-->

<!ATTLIST Layout
    %uicomponent.attributes;
    backgroundColor CDATA #IMPLIED
    backgroundImage CDATA #IMPLIED
    boxType (vbox | hbox) #IMPLIED
    gutter CDATA '0'
    hAlign (left | center | right) 'left'
    padding CDATA '0'
    vAlign (top | middle | bottom) 'top'
>
<!--The simplest type of layout box. Child elements in a Canvas are positioned absolutely within the canvas box at the (x, y) position specified in the child element. -->
<!ELEMENT Canvas (ViewStack | Canvas | HBox | VBox | Grid | AudioPlayer | VideoPlayer | VideoDisplay | ChromelessVideoPlayer | MediaControls | TextRegion | GraphicBlock | Playhead | VolumeControl | Label | Image | Link | Button | LiveButton | ToggleButton | ThumbnailButton | TitleLabel | ComboBox | List | TileList | TabBar | Banner | ExpandingBanner | Spacer | SWFLoader)*>

<!-- @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr visible Whether the component should be visible.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left. 
     @attr backgroundColor Background color for the Layout. Child elements are rendered over the background color. 
     @attr backgroundImage Background image for the Layout. Child elements are rendered over the background image.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr maxHeight The maximum height in pixels that the box should render at.
     @attr maxWidth The maximum width in pixels that the box should render at.
     @attr padding The pixel padding within the borders of the element, from which all positioning is made.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
-->
<!ATTLIST Canvas
    %uicomponent.attributes;
    backgroundColor CDATA #IMPLIED
    backgroundImage CDATA #IMPLIED
    maxHeight CDATA #IMPLIED
    maxWidth CDATA #IMPLIED
    padding CDATA '0'
>
<!-- A layout box that allows for a more complex layout, with child elements laid out in columns and rows. -->
<!ELEMENT Grid  (Columns,Rows)>
<!-- @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr visible Whether the component should be visible.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left. 
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr backgroundColor Background color for the Layout. Child elements are rendered over the background color. 
     @attr backgroundImage Background image for the Layout. Child elements are rendered over the background image.
     @attr maxHeight The maximum height in pixels that the box should render at.
     @attr maxWidth The maximum width in pixels that the box should render at.
     @attr padding The pixel padding within the borders of the element, from which all positioning is made.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
-->
<!ATTLIST Grid
    %uicomponent.attributes;
    backgroundColor CDATA #IMPLIED
    backgroundImage CDATA #IMPLIED
    maxHeight CDATA #IMPLIED
    maxWidth CDATA #IMPLIED
    padding CDATA '0'
>
<!-- Used to contain the individual Column elements in a Grid layout box. Its only attribute is gutter, allowing the setting of the pixel space between each column.-->
<!ELEMENT Columns  (Column)+>
<!-- @attr gutter The pixel space between columns.
-->
<!ATTLIST Columns
    gutter CDATA '0'
>

<!--Used to specify how many columns are to appear in a Grid and, optionally, the width of each column. No child elements are actually added to a Column element; instead, the child elements in the Grid are specified within Row elements.-->
<!ELEMENT Column EMPTY>
<!-- @attr width The width of the column in pixels or percent.
-->
<!ATTLIST Column
    width CDATA #IMPLIED
>
<!-- Used to contain the individual Row elements in a Grid layout box. Its only attribute is gutter, allowing the setting of the pixel space between each row.-->
<!ELEMENT Rows  (Row)+>
<!-- @attr gutter The pixel space between rows.
-->
<!ATTLIST Rows
    gutter CDATA '0'
>
<!-- Used only within a Rows element, which in turn can be used only within a Grid layout box. A Row element acts very much like an HBox, laying out child items horizontally according to the width of the columns as specified in the Grid's Columns element. The number of child elements must correspond to the number of columns in the Grid. Any layout box or component can be a child element of a Row element.-->
<!ELEMENT Row  (ViewStack | Canvas | HBox | VBox | Grid | AudioPlayer | VideoPlayer | VideoDisplay | ChromelessVideoPlayer | MediaControls | TextRegion | GraphicBlock | Playhead | VolumeControl | Label | Image | Link | Button | LiveButton | ToggleButton | ThumbnailButton | TitleLabel | ComboBox | List | TileList | TabBar | Banner | ExpandingBanner | Spacer | SWFLoader)*>
<!-- @attr backgroundColor Background color for the Row. Child elements are rendered over the background color. 
     @attr backgroundImage Background image for the Row. Child elements are rendered over the background image.
     @attr gutter The pixel space between child elements.
     @attr hAlign Horizontal alignment.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr padding The pixel padding within the borders of the row, from which all positioning is made.
     @attr vAlign Vertical alignment.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr visible Whether the component should be visible.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
 -->
 <!ATTLIST Row
    %uicomponent.attributes;
    backgroundColor CDATA #IMPLIED
    backgroundImage CDATA #IMPLIED
    gutter CDATA '0'
    hAlign (left | center | right) 'left'
    padding CDATA '0'
    vAlign (top | middle | bottom) 'top'
>
<!--A vertical box that lays out all child elements vertically. Child elements in a VBox are positioned sequentially from top to bottom, with each child element being placed directly below the preceding child element, with any specified pixel gutter between.-->
<!ELEMENT VBox (ViewStack | Canvas | HBox | VBox | Grid | AudioPlayer | VideoPlayer | VideoDisplay | ChromelessVideoPlayer | MediaControls | TextRegion | GraphicBlock | Playhead | VolumeControl | Label | Image | Link | Button | LiveButton | ToggleButton | ThumbnailButton | TitleLabel | ComboBox | List | TileList | TabBar | Banner | ExpandingBanner | Spacer | SWFLoader)*>
<!-- @attr backgroundColor Background color for the element. Child elements are rendered over the background color. 
     @attr backgroundImage Background image for the element. Child elements are rendered over the background image.
     @attr gutter The pixel space between child elements.
     @attr hAlign Horizontal alignment.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr maxHeight The maximum height in pixels that the box should render at.
     @attr maxWidth The maximum width in pixels that the box should render at.
     @attr padding The pixel padding within the borders of the box, from which all positioning is made.
     @attr vAlign Vertical alignment.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr visible Whether the component should be visible.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
-->
 <!ATTLIST VBox
    %uicomponent.attributes;
    backgroundColor CDATA #IMPLIED
    backgroundImage CDATA #IMPLIED
    gutter CDATA '0'
    hAlign (left | center | right) 'left'
    maxHeight CDATA #IMPLIED
    maxWidth CDATA #IMPLIED
    padding CDATA '0'
    vAlign (top | middle | bottom) 'top'
>
<!-- A horizontal box that lays out all its child elements horizontally. Child elements in an HBox are positioned sequentially from left to right, with each child element being placed directly to the right of the preceding child element, with an optional gutter between.-->
<!ELEMENT HBox  (ViewStack | Canvas | HBox | VBox | Grid | AudioPlayer | VideoPlayer | VideoDisplay | ChromelessVideoPlayer | MediaControls | TextRegion | GraphicBlock | Playhead | VolumeControl | CaptionControls | Label | Image | Link | Button | LiveButton | ToggleButton | ThumbnailButton | TitleLabel | ComboBox | List | TileList | TabBar | Banner | ExpandingBanner | Spacer | SWFLoader)*>
<!-- @attr backgroundColor Background color for the element. Child elements are rendered over the background color. 
     @attr backgroundImage Background image for the element. Child elements are rendered over the background image.
     @attr gutter The pixel space between child elements.
     @attr hAlign Horizontal alignment.
     @attr maxHeight The maximum height in pixels that the box should render at.
     @attr maxWidth The maximum width in pixels that the box should render at.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr padding The pixel padding within the borders of the box, from which all positioning is made.
     @attr vAlign Vertical alignment.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr visible Whether the component should be visible.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
 -->
<!ATTLIST HBox
    %uicomponent.attributes;
    backgroundColor CDATA #IMPLIED
    backgroundImage CDATA #IMPLIED
    gutter CDATA '0'
    hAlign (left | center | right) 'left'
    maxHeight CDATA #IMPLIED
    maxWidth CDATA #IMPLIED
    padding CDATA '0'
    vAlign (top | middle | bottom) 'top'
>
<!--A layout box that stacks all elements on top of each other and can show only one element at a time based on the selected index in the stack. -->
<!ELEMENT ViewStack (ViewStack | Canvas | HBox | VBox | Grid | AudioPlayer | VideoPlayer | VideoDisplay | ChromelessVideoPlayer | MediaControls | TextRegion | GraphicBlock | Playhead | VolumeControl | Label | Image | Link | Button | LiveButton | ToggleButton | ThumbnailButton | TitleLabel | ComboBox | List | TileList | TabBar | Banner | ExpandingBanner | Spacer | SWFLoader)*>

<!-- @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr visible Whether the component should be visible.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left. 
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr backgroundColor Background color for the Layout. Child elements are rendered over the background color. 
     @attr backgroundImage Background image for the Layout. Child elements are rendered over the background image.
     @attr maxHeight The maximum height in pixels that the box should render at.
     @attr maxWidth The maximum width in pixels that the box should render at.
     @attr padding The pixel padding within the borders of the element, from which all positioning is made.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr selectedIndex The index in the stack of the visible child element.
     @attr selectedItemID The BEML id of the visible child element.
-->
<!ATTLIST ViewStack
    %uicomponent.attributes;
    backgroundColor CDATA #IMPLIED
    backgroundImage CDATA #IMPLIED
    maxHeight CDATA #IMPLIED
    maxWidth CDATA #IMPLIED
    padding CDATA '0'
    selectedIndex CDATA '0'
    selectedItemID CDATA #IMPLIED
>

<!-- components to layout within layout boxes-->

<!--The nonrendering AudioPlayer allows for programming and playback of audio media within the player.-->
<!ELEMENT AudioPlayer EMPTY>
<!-- @attr audioTrack The audio track to play.
     @attr autoStart Whether the video should begin to play back immediately when the player loads.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
-->
<!ATTLIST AudioPlayer
    audioTrack CDATA #IMPLIED
    autoStart (true | false) 'false'
    id ID #IMPLIED
>
<!--The Banner plugs into the advertising capabilities in a player. When a Banner element is included, a new format is allowed and are appended to all ad server calls, informing the ad server that a banner can be displayed. The size of the banner dictates the ad format supported, so a 468x60 banner element by default supports a 468x60 banner ad format. Additional ad formats can be specified as well, so that you can use a large banner area to support several smaller sizes of banner. How those banners are scaled and aligned within the larger area is controlled by the Banner's attributes.-->
<!ELEMENT Banner EMPTY>
<!-- @attr bannerFormats A comma-delimited list of supported banner formats; these map to the formats of Brightcove's rich media templates. If a Banner component is of a size that matches one of the Brightcove-supported banner formats, that format is automatically included.
     @attr hAlign Horizontal alignment.
     @attr scaleMode How the Banner image should be scaled within the dimensions of the element.
     @attr source The path to the image to load; this is dynamically populated for incoming ads.
     @attr tooltip The text of a tooltip to appear when the viewer rolls over the image.
     @attr url The URL to send the viewer to when the image is clicked;  this is dynamically populated for incoming ads.
     @attr vAlign Vertical alignment.
     @attr height The height of the element in percent or pixels.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.
-->
<!ATTLIST Banner
    %sprite.attributes;
    bannerFormats CDATA #IMPLIED
    hAlign (left | center | right) 'center'
    scaleMode (noScale | exactFit | showAll | scaleDown | noBorder) 'noScale'
    source CDATA #IMPLIED
    tooltip CDATA #IMPLIED
    url CDATA #IMPLIED
    vAlign (top | middle | bottom) 'middle'
>
<!-- Defines a clickable graphic with a label that can broadcast events.
-->
<!ELEMENT Button EMPTY>
<!-- @attr autoSize Whether the button should automatically resize based on the amount of text.
     @attr click The function to call when the button is clicked.
     @attr data Data stored with the element that can be passed when the button is clicked.
     @attr font The font to use for the label. The font must be loaded through a style.
     @attr iconAlignmentH The horizontal alignment of the icon within the button's dimensions.
     @attr iconAlignmentV The vertical alignment of the icon within the button's dimensions.
     @attr iconName The name of icon to use for the button.
     @attr iconOffsetX The pixel offset on the x axis to apply to the icon.
     @attr iconOffsetY The pixel offset on the y axis to apply to the icon.
     @attr iconScale The percentage of the icon size at which to render the icon.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr label The text to display on the button.
     @attr labelAlignmentH The horizontal alignment of the label within the button's dimensions.
     @attr labelAlignmentV The vertical alignment of the label within the button's dimensions.
     @attr labelBuffer The distance in pixels between the edge of the button and its label.
     @attr labelOffsetX The pixel offset on the x axis to apply to the label.
     @attr labelOffsetY The pixel offset on the y axis to apply to the label.
     @attr lockHeight Used with autoSize, locks the height of the button to the specified pixel height, allowing the button to resize only horizontally.
     @attr maxWidth Used with autoSize, sets the maximum width the button can be before it begins to truncate its label.
     @attr multiline Whether the button label should display multiple lines of text.
     @attr showBack Whether the background of the graphic should be shown.
     @attr size The size of the text to display, in points.
     @attr tooltip The tooltip to display on rollover of the text.
     @attr truncateLabel Whether the label should display an elipsis (...) when the text to display exceeds the button's width.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.
     @attr tabIndex The index of the element in the player tab order.
     @attr accessibleName The text read by screenreader when element received focus.
-->
<!ATTLIST Button
    %sprite.attributes;
    autoSize (true | false) 'false'
    click CDATA #IMPLIED
    data CDATA #IMPLIED
    font CDATA #IMPLIED
    iconAlignmentH (right | center | left) 'center'
    iconAlignmentV (top | middle | bottom) 'middle'
    iconOffsetX CDATA '0'
    iconOffsetY CDATA '0'
    iconName CDATA #IMPLIED
    iconScale CDATA '1'
    label CDATA #IMPLIED
    labelAlignmentH (left | center | right) 'center'
    labelAlignmentV (top | middle | bottom) 'middle'
    labelBuffer CDATA '0'
    labelOffsetX CDATA '0'
    labelOffsetY CDATA '0'
    lockHeight (true | false) 'false'
    maxWidth CDATA #IMPLIED
    multiline (true | false) 'false'
    showBack (true | false) 'true'
    size CDATA #IMPLIED
    tooltip CDATA #IMPLIED
    truncateLabel (true | false) 'false'
    tabIndex CDATA #IMPLIED
    accessibleName CDATA #IMPLIED
>
<!--A video window with overlaid video controls that hide when the mouse is not over the video or there is user inaction.
-->
<!ELEMENT ChromelessVideoPlayer (ChromelessControls?)>
<!-- @attr autoStart Whether the video should begin to play back immediately when the player loads.
     @attr preventFullScreen Whether the maximize button should be suppressed in the player's controls. 
     @attr video The videoDTO currently loaded into the video player
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.
     @attr compactViewThreshold The pixel width threshold at which the controls will switch to a compact view, if defined.
     @attr hideControlsOnLoad Whether the controls should be hidden on instantiation of the component.
     @attr useOverlayMenu Whether the menu with video name and menu icons should appear overlaid on the video.
-->
<!ATTLIST ChromelessVideoPlayer
    %sprite.attributes;
    autoStart (true | false) 'false'
    preventFullScreen (true | false) 'false'
    video CDATA #IMPLIED
    compactViewThreshold CDATA '320'
    hideControlsOnLoad (true | false) 'false'
    useOverlayMenu (true | false) 'true'
    includeCaptionControls (true | false) 'true'
    showCaptionMenu (true | false) 'true'
>
<!--The layout box for the UI that overlays the video and is only shown on user rollover.
-->
<!ELEMENT ChromelessControls (ViewStack | Canvas | HBox | VBox | Grid | MediaControls | TextRegion | GraphicBlock | Label | Image | Link | Button | LiveButton | ToggleButton | ThumbnailButton | TitleLabel | ComboBox | List | TileList | TabBar | Banner | Spacer | SWFLoader | VolumeControl | CaptionControls)*>
<!-- @attr backgroundColor Background color for the Layout. Child elements are rendered over the background color. 
     @attr backgroundImage Background image for the Layout. Child elements are rendered over the background image.
     @attr boxType The type of layout box.
     @attr gutter The pixel space between child elements; only applicable if the boxType is "hbox" or "vbox."
     @attr hAlign Horizontal alignment.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr padding The pixel padding within the borders of the box, from which all positioning is made.
     @attr vAlign Vertical alignment.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr visible Whether the component should be visible.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
-->
<!ATTLIST ChromelessControls
    %uicomponent.attributes;
    backgroundColor CDATA #IMPLIED
    backgroundImage CDATA #IMPLIED
    boxType (vbox | hbox) #IMPLIED
    gutter CDATA '0'
    hAlign (left | center | right) 'left'
    padding CDATA '0'
    vAlign (top | middle | bottom) 'top'
>
<!--Renders a drop down list of scrollable items.-->
<!ELEMENT ComboBox (data?)>
<!-- @attr data The data for the list. This can be bound to a value in another component, for example, the videos defined in a playlist stored in a tab. 
     @attr itemInsetH The amount in pixels that items within the list are inset horizontally from the borders of the list.
     @attr itemInsetV The amount in pixels that items within the list are inset vertically from the borders of the list.
     @attr itemLeading The vertical space in pixels between each item (defaults to 5).
     @attr noInitialSelection Whether the first item in the list should be in a selected state when the list is initially rendered.
     @attr rowHeight The height of each row in pixels (defaults to 50).
     @attr scrollerInset The amount in pixels that the vertical scrollbar is inset horizontally from the borders of the list.
     @attr scrollerWidth The width in pixels of the vertical scrollbar.
     @attr animated Whether the list should animate when opening.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr label The text that should display when no item is selected.
     @attr labelBufferLeft The pixel buffer to the left of the label.
     @attr labelBufferRight The pixel buffer to the right of the label.
     @attr labelBufferTop The pixel buffer to the top of the label.
     @attr labelField The property of the list item that should be used for the item label.
     @attr numRows The maximum number of rows that should display when the list is opened.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr tabIndex The index of the element in the player tab order.
     @attr accessibleName The text read by screenreader when element received focus.
     @attr visible Whether the component should be visible.
     @attr useComboOverlay Whether the popup menu should be rendered on a layer above all UI elements.-->
<!ATTLIST ComboBox
    %sprite.attributes;
    animated (true | false) 'true'
    data CDATA #IMPLIED
    itemInsetH CDATA '0'
    itemInsetV CDATA '0'
    itemLeading CDATA '0'
    label CDATA #IMPLIED
    labelBufferLeft CDATA '6'
    labelBufferRight CDATA '16'
    labelBufferTop CDATA '1'
    labelField CDATA 'label'
    noInitialSelection (true | false) 'false'
    numRows CDATA '5'
    rowHeight CDATA '22'
    scrollerInset CDATA '0'
    scrollerWidth CDATA '23'
    tabIndex CDATA #IMPLIED
    accessibleName CDATA #IMPLIED
    useComboOverlay (true | false) 'false'
>
<!-- The data provider for a ComboBox-->
<!ELEMENT data (String)*>
<!-- The String datatype for use in list item data.-->
<!ELEMENT String (#PCDATA)>

<!--The ExpandingBanner plugs into the advertising capabilities in a player. When an Expanding Banner element is included, two new formats are allowed and are appended all ad server calls informing the ad server that a banner can be displayed. The size of the banner dictates the ad formats supported, so a 468x60 banner element by default supports a 468x60 banner ad format and a 468x60 synched banner unit. Additional ad formats can be specified as well, so that a large banner area can actually be made to support several smaller sizes of banner. How those banners are scaled and aligned within the larger area is controlled by the ExpandingBanner's attributes.-->
<!ELEMENT ExpandingBanner EMPTY>
<!-- @attr animationType How the banner animates when it expands or collapses.
     @attr bannerFormats  A comma-delimited list of supported banner formats; these map to the formats of Brightcove's rich media templates. If a Banner component is of a size that matches one of the Brightcove-supported banner formats, that format is automatically included.
     @attr buttonHeight The height in pixels of the expand/collapsed buttons; the default is 10. 
     @attr buttonWidth The width in pixels of the expand/collapse buttons; the default is 60.
     @attr collapsedHAlign The horizontal alignment of the collapsed image within its dimensions.
     @attr collapsedVAlign The vertical alignment of the collapsed image within its dimensions.
     @attr disableOnExpand A comma-separated list of the names of the components to disable when the banner is in its expanded state.  
     @attr expandDirection The direction in which the expanded unit will be placed, in relation to the collapsed unit.
     @attr expandedHeight The height in pixels of the expanded unit. 
     @attr expandedOffsetX The number of pixels on the x axis to move the expanded unit in relation to the collapsed unit; default is 0.
     @attr expandedOffsetY The number of pixels on the y axis to move the expanded unit in relation to the collapsed unit; default is 0.
     @attr expandedWidth The width in pixels of the expanded unit; the default is the full width of the ExpandingBanner component.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr showButtons Whether the expand/collapse buttons are visible.	 
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.-->
<!ATTLIST ExpandingBanner
    %sprite.attributes;
    animationType (fade | expand) 'expand'
    bannerFormats CDATA #IMPLIED
    buttonHeight CDATA '10'
    buttonWidth CDATA '60'
    collapsedHAlign (left | center | right) 'left'
    collapsedVAlign (top | middle | bottom) 'top'
    disableOnExpand CDATA #IMPLIED
    expandDirection (up | down) 'up'
    expandedHeight CDATA '250'
    expandedOffsetX CDATA '0'
    expandedOffsetY CDATA '0'
    expandedWidth CDATA '-1'
    showButtons (true | false) 'true'
>
<!--The GraphicBlock is a non-interactive graphic that can be used as a skin behind other elements. -->
<!ELEMENT GraphicBlock EMPTY>
<!-- @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.-->
<!ATTLIST GraphicBlock
    %sprite.attributes;
>
<!--Allows for any JPG, GIF or SWF to be loaded into a player, scaled according to the scaleMode attribute of the component.
-->
<!ELEMENT Image EMPTY>
<!-- @attr click The function to call when the button is clicked.
     @attr data Data stored with the element that can be passed when the button is clicked.
     @attr hAlign Horizontal alignment.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr scaleMode How the image should be scaled within the dimensions of the element.
     @attr source The path to the image to load.
     @attr tooltip The tooltip to display on rollover of the image.
     @attr url The URL to send the viewer to when the image is clicked
     @attr vAlign Vertical alignment.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr tabIndex The index of the element in the player tab order.
     @attr accessibleName The text read by screenreader when element received focus.
     @attr visible Whether the component should be visible.-->
<!ATTLIST Image
    %sprite.attributes;
    click CDATA #IMPLIED
    data CDATA #IMPLIED
    hAlign (left | center | right) 'center'
    scaleMode (noScale | exactFit | showAll | scaleDown | noBorder) 'exactFit'
    source CDATA #IMPLIED
    tooltip CDATA #IMPLIED
    url CDATA #IMPLIED
    vAlign (top | middle | bottom) 'middle'
    tabIndex CDATA #IMPLIED
    accessibleName CDATA #IMPLIED
>

<!--A simple text component that allows for any text to be added to an experience. The text can be bound dynamically to any other component's property, for instance to display the name of the currently playing video.-->
<!ELEMENT Label EMPTY>
<!-- @attr color The color of the text to display.
     @attr font The font to use for the label. The font must be loaded through a style.
     @attr hAlign Horizontal alignment.
     @attr htmlEnabled Whether the label should render HTML text.
     @attr multiline Whether the label should display multiple lines of text.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr resize Deprecated.
     @attr autoSize Whether the label should automatically resize with the amount of text.
     @attr size The size of the text, in points.
     @attr text The text of the label.
     @attr translationText If the text exists as a label key in the loaded resource bundle, the translated text will appear.
     @attr truncate Whether the label should display an elipsis (...) when the text to display exceeds the label's width.
     @attr type A type which corresponds to the desired style to apply.
     @attr underline Whether the text should be underlined.
     @attr vAlign Vertical alignment.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr tabIndex The index of the element in the player tab order.
     @attr visible Whether the component should be visible.-->
<!ATTLIST Label
    %sprite.attributes;
    color CDATA #IMPLIED
    font CDATA #IMPLIED
    hAlign (left | center | right) 'left'
    htmlEnabled (true | false) 'false'
    multiline (true | false) 'false'
    resize (true | false) 'false'
    autoSize (true | false) 'false'
    size CDATA #IMPLIED
    text CDATA #IMPLIED
    translationText CDATA #IMPLIED
    truncate (true | false) 'false'
    type (body | title | link) 'body'
    underline (true | false) 'false'
    vAlign (top | middle | bottom) 'top'
    tabIndex CDATA #IMPLIED
>
<!-- Provides a means to display clickable text within a player to be used to navigate to another URL or call JavaScript.-->
<!ELEMENT Link EMPTY>
<!-- @attr click The function to call when the link is clicked.
     @attr data Data stored with the element that can be passed when the link is clicked.
     @attr font The font to use for the link. The font must be loaded through a style.
     @attr hAlign Horizontal alignment.
     @attr multiline Whether the link should display multiple lines of text.
     @attr size The size of the link text, in points.
     @attr text The text of the link.
     @attr tooltip The tooltip to display on rollover of the image.
     @attr url The URL to send the viewer to when the link is clicked
     @attr vAlign Vertical alignment.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr tabIndex The index of the element in the player tab order.
     @attr visible Whether the component should be visible.
-->
<!ATTLIST Link
    %sprite.attributes;
    click CDATA #IMPLIED
    data CDATA #IMPLIED
    font CDATA #IMPLIED
    hAlign (left | center | right) 'left'
    multiline (true | false) 'false'
    size CDATA #IMPLIED
    text CDATA #IMPLIED
    tooltip CDATA #IMPLIED
    url CDATA #IMPLIED
    vAlign (top | middle | bottom) 'top'
    tabIndex CDATA #IMPLIED
>
<!--Displays a vertical scrolling list composed of ListItems. Each ListItem in turn specifies its contained elements and their layout. A ListItem can contain any of the supported UI control components, other than a VideoPlayer or a list component.-->
<!ELEMENT List (ListItem)>
<!-- @attr automaticAdvance Whether videos (if a video list) should automatically advance when play is complete.
     @attr data The data for the list. This can be bound to a value in another component, for example, the videos defined in a playlist stored in a tab. 
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr itemInsetH The amount in pixels that items within the list are inset horizontally from the borders of the list.
     @attr itemInsetV The amount in pixels that items within the list are inset vertically from the borders of the list.
     @attr itemLeading The vertical space in pixels between each item (defaults to 5).
     @attr noInitialSelection Whether the first item in the list should be in a selected state when the list is initially rendered.
     @attr noSelect Whether the list should show and maintain a selected state; this is useful when a list is used independently of any other elements, like a video player, where a click might launch a new browser window.
     @attr rowHeight The height of each row in pixels (defaults to 50).
     @attr scrollerInset The amount in pixels that the vertical scrollbar is inset horizontally from the borders of the list.
     @attr scrollerWidth The width in pixels of the vertical scrollbar.
     @attr selectOnClick Whether clicking subelements in the list items automatically selects the associated list item.
     @attr showBack Deprecated.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.-->
<!ATTLIST List
    %sprite.attributes;
    automaticAdvance (true | false) 'false'
    data CDATA #IMPLIED
    itemInsetH CDATA '3'
    itemInsetV CDATA '4'
    itemLeading CDATA '3'
    noInitialSelection (true | false) 'false'
    noSelect (true | false) 'false'
    rowHeight CDATA '50'
    scrollerInset CDATA '3'
    scrollerWidth CDATA '13'
    selectOnClick (true | false) 'false'
    showBack (true | false) 'true'
>
<!--A ListItem must be defined within a List or TileList component. A ListItem can contain any supported component except a VideoPlayer or another list.-->
<!ELEMENT ListItem (Canvas | HBox | VBox | Grid | GraphicBlock | Label | Image | Link | Button | ThumbnailButton | TitleLabel | Spacer | SWFLoader)*>
<!-- @attr backgroundColor Background color for the ListItem. Child elements are rendered over the background color. 
     @attr backgroundImage Background image for the ListItem. Child elements are rendered over the background image.
     @attr boxType The type of layout box.
     @attr gutter The pixel space between child elements.
     @attr padding The pixel padding within the borders of the box, from which all positioning is made.
     @attr showBack Whether the background of the graphic should be shown.
     @attr height The height of the element in percent or pixels.
     @attr hAlign Horizontal alignment.
     @attr vAlign Vertical alignment.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr visible Whether the component should be visible.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
-->
<!ATTLIST ListItem
    %uicomponent.attributes;
    backgroundColor CDATA #IMPLIED
    backgroundImage CDATA #IMPLIED
    boxType (vbox | hbox) #IMPLIED
    gutter CDATA '0'
    hAlign (left | center | right) 'left'
    vAlign (top | middle | bottom) 'top'
    padding CDATA '0'
    showBack (true | false ) 'true'
>
<!--A layout container for media UI controls to control playback of audio or video.-->
<!ELEMENT MediaControls (ViewStack | Canvas | HBox | VBox | Grid | GraphicBlock | ComboBox | Label | Image | Link | Button | LiveButton | ToggleButton | TitleLabel | Spacer | SWFLoader | Playhead | VolumeControl | CaptionControls)*>
<!-- @attr backgroundColor Background color for the ListItem. Child elements are rendered over the background color. 
     @attr backgroundImage Background image for the ListItem. Child elements are rendered over the background image.
     @attr boxType The type of layout box.
     @attr depth The depth of the component in levels.
     @attr gutter The pixel space between child elements.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr padding The pixel padding within the borders of the box, from which all positioning is made.
     @attr showBack Whether the background of the graphic should be shown.
     @attr height The height of the element in percent or pixels.
     @attr hAlign Horizontal alignment.
     @attr vAlign Vertical alignment.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr visible Whether the component should be visible.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
-->
<!ATTLIST MediaControls
    %uicomponent.attributes;
    backgroundColor CDATA #IMPLIED
    backgroundImage CDATA #IMPLIED
    boxType (vbox | hbox) #IMPLIED
    depth CDATA #IMPLIED
    gutter CDATA '0'
    hAlign (left | center | right) 'left'
    vAlign (top | middle | bottom) 'top'
    padding CDATA '0'
    showBack (true | false ) 'true'
>
<!-- A scrubber bar to control media playback and show current media position.
-->
<!ELEMENT Playhead EMPTY>
<!-- @attr mediaController The media controller (e.g., VideoPlayer, VideoDisplay, AudioPlayer) to receive events from and control playback of.
     @attr autohideSlider Whether the slider should only appear on rollover.
     @attr sliderWidth The width of the draggable slider in pixels.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr useTimeToolTip Whether a tooltip with the time of the mouse position should appear on rollover.
     @attr visible Whether the component should be visible.
     @attr tabIndex The index of the element in the player tab order.
     @attr accessibleName The text read by screenreader when element received focus.
-->
<!ATTLIST Playhead
    %sprite.attributes;
    mediaController CDATA #IMPLIED
    autohideSlider (true | false) 'true'
    sliderWidth CDATA '20'
    useTimeToolTip (true | false) 'false'
    tabIndex CDATA #IMPLIED
    accessibleName CDATA #IMPLIED
>
<!--A formatting component that creates space between other elements.-->
<!ELEMENT Spacer EMPTY>
<!-- @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr width The width of the element in pixels or percent.-->
<!ATTLIST Spacer
    id CDATA #IMPLIED
    height CDATA #IMPLIED
    width CDATA #IMPLIED
    includeInLayout CDATA 'true'
>
<!--The SWFLoader component allows you to specify a custom-developed SWF to be loaded, positioned and sized within a player. You can develop a custom component using ActionScript 3 and the Brightcove Player API. In order for the loaded SWF to be passed a handle to the runtime API, so that it can listen for events and interact with the rest of the player, it should implement the interface defined by this  method signature: <br />
<code>function setInterface(obj:Object):void;</code>-->
<!ELEMENT SWFLoader EMPTY>
<!-- @attr source The URL of the SWF for the custom component to be loaded.
     @attr data Additional data that is passed to the loaded SWF.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.-->
<!ATTLIST SWFLoader
    %sprite.attributes;
    data CDATA #IMPLIED
    source CDATA #IMPLIED
>
<!--Displays a horizontally-paging series of tabs. The TabBar allows for a single selection in the collection. The TabBar displays left and right navigation when the number of tabs exceeds the component dimensions. Optionally, the TabBar can display a tab that produces a dropdown list on rollover.-->
<!ELEMENT TabBar EMPTY>
<!-- @attr autoSizeTabs Whether tabs are sized based on the length of their labels or are a fixed width.
     @attr data The data for the element. This can be bound to a value in another component, for example, the videos defined in a playlist stored in a tab.
     @attr hideSingleTab If there is only a single tab, whether to display a tab.
     @attr includeMenu Whether to display the tab with the drop down quick navigation menu when necessary.
     @attr labelBuffer The pixel space to the left and right of labels within a tab.
     @attr labelField The field in the data object that determines the label of a tab.
     @attr maxMenuRows The maximum number of menu rows that can display in the drop down quick navigation menu before paging is forced.
     @attr menuItemInset The horizontal pixel inset of labels within the drop down quick navigation menu.
     @attr menuRowHeight The height in pixels of each item in the drop down quick navigation menu .
     @attr menuWidth The width of the drop down quick navigation menu when it opens.
     @attr tabAlign The horizontal alignment of tabs within the component.
     @attr tabPadding The horizontal space between tabs, in pixels.
     @attr tabWidth The fixed width of a tab if autoSizeTabs is false.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.-->
<!ATTLIST TabBar
    %sprite.attributes;
    autoSizeTabs (true | false) 'true'
    data CDATA #IMPLIED
    hideSingleTab (true | false) 'false'
    includeMenu (true | false) 'true'
    labelBuffer CDATA '6'
    labelField CDATA 'label'
    maxMenuRows CDATA '8'
    menuItemInset CDATA '5'
    menuRowHeight CDATA '20'
    menuWidth CDATA '160'
    tabAlign (left | center | right) 'left'
    tabPadding CDATA '-1'
    tabWidth CDATA '60'
>
<!--A layout container for text elements.-->
<!ELEMENT TextRegion (ViewStack | Canvas | HBox | VBox | Grid | GraphicBlock | Label | Image | Link | TitleLabel | Spacer | SWFLoader)*>
<!-- @attr backgroundColor Background color for the ListItem. Child elements are rendered over the background color. 
     @attr backgroundImage Background image for the ListItem. Child elements are rendered over the background image.
     @attr boxType The type of layout box.
     @attr depth The depth of the component in levels.
     @attr gutter The pixel space between child elements.
     @attr padding The pixel padding within the borders of the box, from which all positioning is made.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr showBack Whether the background of the graphic should be shown.
     @attr height The height of the element in percent or pixels.
     @attr hAlign Horizontal alignment.
     @attr vAlign Vertical alignment.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr visible Whether the component should be visible.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
-->
<!ATTLIST TextRegion
    %uicomponent.attributes;
    backgroundColor CDATA #IMPLIED
    backgroundImage CDATA #IMPLIED
    boxType (vbox | hbox) #IMPLIED
    depth CDATA #IMPLIED
    gutter CDATA '0'
    hAlign (left | center | right) 'left'
    vAlign (top | middle | bottom) 'top'
    padding CDATA '0'
    showBack (true | false ) 'true'
>
<!--Displays an image. When the viewer moves the cursor over the image, the button displays a play icon.
-->
<!ELEMENT ThumbnailButton EMPTY>
<!-- @attr click The function to call when the button is clicked.
     @attr data Data stored with the element that can be passed when the button is clicked.
     @attr source The path to the image to load.
     @attr tooltip The text of a tooltip to appear when the viewer rolls over the image.
     @attr imageInset The amount in pixels to inset the image within the button.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.-->
<!ATTLIST ThumbnailButton
    %sprite.attributes;
    click CDATA #IMPLIED
    data CDATA #IMPLIED
    source CDATA #IMPLIED
    tooltip CDATA #IMPLIED
    imageInset CDATA '0'
>
<!--A grid list with user-defined list items. A TileList contains ListItems, each of which can contain other components.-->
<!ELEMENT TileList (ListItem)>
<!-- @attr animationType How the list animates its items when paging.
     @attr automaticAdvance Whether videos (if a video list) should automatically advance when play is complete.
     @attr buttonOffsetX The pixel position offset from center on the x axis for navigation buttons when the list is set to scroll vertically.
     @attr buttonOffsetY The pixel position offset from center on the y axis for navigation buttons when the list is set to scroll horizontally.
     @attr buttonSize The width and height in pixels of the navigation buttons.
     @attr centerContent Whether content should be centered in the list.
     @attr columnGutter The distance between columns, in pixels.
     @attr columnWidth The width of each column, in pixels (defaults to 50).
     @attr contentInsetH The amount in pixels that items within the list are inset horizontally from the borders of the list.
     @attr contentInsetV The amount in pixels that items within the list are inset vertically from the borders of the list.
     @attr data The data for the list. This can be bound to a value in another component, for example, the videos defined in a playlist stored in a tab. 
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr noInitialSelection Whether the first item in the list should be in a selected state when the list is initially rendered.
     @attr noSelect Whether the list should show and maintain a selected state; this is useful when a list is used independently of any other elements, like a video player, where a click might launch a new browser window.
     @attr numColumns The number of columns that should render in the list. Defaults to -1, which denotes that the size of the list determines the number of columns.
     @attr numRows The number of rows that should render in the list. Defaults to -1, which denotes that the size of the list determines the number of rows.
     @attr rowHeight The height of each row in pixels (defaults to 50).
     @attr rowGutter The distance between rows, in pixels.
     @attr scrollDirection Whether the list should scroll vertically or horizontally.
     @attr selectOnClick Whether clicking subelements in the list items automatically selects the associated list item.
     @attr useBlur Whether the list should blur its items as it is animated, if the animationType is move.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.
-->
<!ATTLIST TileList
    %sprite.attributes;
    animationType (move | fade | scale | none) 'move'
    automaticAdvance (true | false) 'false'
    buttonOffsetX CDATA '0'
    buttonOffsetY CDATA '0'
    buttonSize CDATA '30'
    centerContent (true | false ) 'true'
    columnGutter CDATA '5'
    columnWidth CDATA '50'
    contentInsetH CDATA '0'
    contentInsetV CDATA '0'
    data CDATA #IMPLIED
    noInitialSelection (true | false) 'false'
    noSelect (true | false) 'false'
    numColumns CDATA '-1'
    numRows CDATA '-1'
    rowHeight CDATA '50'
    rowGutter CDATA '5'
    scrollDirection (horizontal | vertical) 'horizontal'
    selectOnClick (true | false) 'true'
    useBlur (true | false) 'false'
>
<!--The TitleLabel is similar to a Label component that can render a "selected" state. This is useful for lists where you need to distinguish the selected item.-->
<!ELEMENT TitleLabel EMPTY>
<!-- @attr color Deprecated.
     @attr font The font to use for the label. The font must be loaded through a style.
     @attr hAlign Horizontal alignment.
     @attr htmlEnabled Deprecated.
     @attr multiline Whether the label should display multiple lines of text.
     @attr resize Deprecated.
     @attr autoSize Whether the label should automatically resize with the amount of text.
     @attr selected Whether the item is in selected state.
     @attr size The size of the text, in points.
     @attr text The text of the label.
     @attr truncate Whether the label should display an elipsis (...) when the text to display exceeds the label's width.
     @attr type Deprecated.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr vAlign Vertical alignment.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.
     @attr tabIndex The index of the element in the player tab order.
-->
<!ATTLIST TitleLabel
    %sprite.attributes;
    color CDATA #IMPLIED
    font CDATA #IMPLIED
    hAlign (left | center | right) 'left'
    htmlEnabled (true | false) 'false'
    multiline (true | false) 'false'
    autoSize (true | false) 'false'
    resize (true | false) 'false'
    selected (true | false) 'false'
    size CDATA #IMPLIED
    text CDATA #IMPLIED
    truncate (true | false) 'false'
    type (body | title | link) 'title'
    vAlign (top | middle | bottom) 'top'
    tabIndex CDATA #IMPLIED
>
<!-- Defines a clickable graphic with a label that can broadcast events and toggle between two states.
-->
<!ELEMENT ToggleButton EMPTY>
<!-- @attr autoSize Whether the button should automatically resize based on the amount of text.
     @attr click The function to call when the button is clicked.
     @attr data Data stored with the element that can be passed when the button is clicked.
     @attr font The font to use for the label. The font must be loaded through a style.
     @attr iconAlignmentH The horizontal alignment of the icon within the button's dimensions.
     @attr iconAlignmentV The vertical alignment of the icon within the button's dimensions.
     @attr iconName The name of icon to use for the button.
     @attr iconOffsetX The pixel offset on the x axis to apply to the icon.
     @attr iconOffsetY The pixel offset on the y axis to apply to the icon.
     @attr iconScale The percentage of the icon size at which to render the icon.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr label The text to display on the button.
     @attr labelAlignmentH The horizontal alignment of the label within the button's dimensions.
     @attr labelAlignmentV The vertical alignment of the label within the button's dimensions.
     @attr labelBuffer The distance in pixels between the edge of the button and its label.
     @attr labelOffsetX The pixel offset on the x axis to apply to the label.
     @attr labelOffsetY The pixel offset on the y axis to apply to the label.
     @attr lockHeight Used with autoSize, locks the height of the button to the specified pixel height, allowing the button to resize only horizontally.
     @attr maxWidth Used with autoSize, sets the maximum width the button can be before it begins to truncate its label.
     @attr multiline Whether the button label should display multiple lines of text.
     @attr showBack Whether the background of the graphic should be shown.
     @attr size The size of the text to display, in points.
     @attr toggled Whether the button is toggled into its selected state, used with binding.
     @attr toggledClick The function to call when the button is clicked when in toggled state.
     @attr toggledIconName The name of icon to use for the button.
     @attr toggledLabel The text to display on the button when in toggled state.
     @attr toggledTooltip The tooltip to display on rollover of the text when in toggled state.
     @attr tooltip The tooltip to display on rollover of the text.
     @attr truncateLabel Whether the label should display an elipsis (...) when the text to display exceeds the button's width.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.
     @attr tabIndex The index of the element in the player tab order.
     @attr accessibleName The text read by screenreader when element received focus.
-->
<!ATTLIST ToggleButton
    %sprite.attributes;
    autoSize (true | false) 'false'
    click CDATA #IMPLIED
    data CDATA #IMPLIED
    font CDATA #IMPLIED
    iconAlignmentH (right | center | left) 'center'
    iconAlignmentV (top | middle | bottom) 'middle'
    iconOffsetX CDATA '0'
    iconOffsetY CDATA '0'
    iconName CDATA #IMPLIED
    iconScale CDATA '1'
    label CDATA #IMPLIED
    labelAlignmentH (left | center | right) 'center'
    labelAlignmentV (top | middle | bottom) 'middle'
    labelBuffer CDATA '0'
    labelOffsetX CDATA '0'
    labelOffsetY CDATA '0'
    lockHeight (true | false) 'false'
    maxWidth CDATA #IMPLIED
    multiline (true | false) 'false'
    showBack (true | false) 'true'
    size CDATA #IMPLIED
    toggled CDATA 'false'
    toggledClick CDATA #IMPLIED
    toggledIconName CDATA #IMPLIED
    toggledLabel CDATA #IMPLIED
    toggledTooltip CDATA #IMPLIED
    tooltip CDATA #IMPLIED
    truncateLabel (true | false) 'false'
    tabIndex CDATA #IMPLIED
    accessibleName CDATA #IMPLIED
>
<!-- Defines a clickable graphic with a label that can broadcast events.  The primary purpose of the LiveButton is to indicate to the user whether the player is in live or DVR mode.  If in DVR mode, the button should be clickable to go to live mode.
-->
<!ELEMENT LiveButton EMPTY>
<!-- @attr autoSize Whether the button should automatically resize based on the amount of text.
     @attr click The action to perform when the component is clicked.
     @attr rollOver The action to perform when the component is rolled over.
     @attr rollOut The action to perform when the component is rolled off.
     @attr data Data stored with the element that can be passed when the button is clicked.
     @attr font The font to use for the label. The font must be loaded through a style.
     @attr label The text to display on the button.
     @attr labelAlignmentH The horizontal alignment of the label within the button's dimensions.
     @attr labelAlignmentV The vertical alignment of the label within the button's dimensions.
     @attr labelBuffer The distance in pixels between the edge of the button and its label.
     @attr labelOffsetX The pixel offset on the x axis to apply to the label.
     @attr labelOffsetY The pixel offset on the y axis to apply to the label.
     @attr lockHeight Used with autoSize, locks the height of the button to the specified pixel height, allowing the button to resize only horizontally.
     @attr maxWidth Used with autoSize, sets the maximum width the button can be before it begins to truncate its label.
     @attr multiline Whether the button label should display multiple lines of text.
     @attr showBack Whether the background of the graphic should be shown.
     @attr size The size of the text to display, in points.
     @attr tooltip The tooltip to display on rollover of the text.
     @attr truncateLabel Whether the label should display an elipsis (...) when the text to display exceeds the button's width.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
-->
<!ATTLIST LiveButton
    %sprite.attributes;
    autoSize (true | false) 'false'
    click CDATA #IMPLIED
    data CDATA #IMPLIED
    font CDATA #IMPLIED
    iconAlignmentH (right | center | left) 'center'
    iconAlignmentV (top | middle | bottom) 'middle'
    iconOffsetX CDATA '0'
    iconOffsetY CDATA '0'
    iconName CDATA #IMPLIED
    iconScale CDATA '1'
    label CDATA #IMPLIED
    labelAlignmentH (left | center | right) 'center'
    labelAlignmentV (top | middle | bottom) 'middle'
    labelBuffer CDATA '0'
    labelOffsetX CDATA '0'
    labelOffsetY CDATA '0'
    lockHeight (true | false) 'false'
    maxWidth CDATA #IMPLIED
    multiline (true | false) 'false'
    showBack (true | false) 'true'
    size CDATA #IMPLIED
    tooltip CDATA #IMPLIED
    truncateLabel (true | false) 'false'
    tabIndex CDATA #IMPLIED
    accessibleName CDATA #IMPLIED
>
<!--A video window without the standard media control bar. Controls appear when the viewer clicks in the video window.
-->
<!ELEMENT VideoDisplay EMPTY>
<!-- @attr autoStart Whether the video should begin to play back immediately when the player loads.
     @attr includeFullscreenControls Whether the default Brightcove fullscreen controls are used.
     @attr showBack Whether a background graphic should render behind the video.
     @attr togglePlaybackOnClick Whether to toggle playback when the video window is clicked.
     @attr video The videoDTO currently loaded into the video player
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.
-->
<!ATTLIST VideoDisplay
    %sprite.attributes;
    autoStart (true | false) 'false'
    includeFullscreenControls (true | false) 'false'
    togglePlaybackOnClick (true | false) 'true'
    showBack (true | false) 'false'
    video CDATA #IMPLIED
>
<!-- A combination of a video window and a set of standard Brightcove media controls including a play/pause toggle, a timeline scrubber, volume controls, maximize controls and a menu access button.-->
<!ELEMENT VideoPlayer EMPTY>
<!-- @attr autoStart Whether the video should begin to play back immediately when the player loads.
     @attr preventFullScreen Whether the maximize button should be suppressed in the player's controls. 
     @attr video The videoDTO currently loaded into the video player.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs.
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element.
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.
-->
<!ATTLIST VideoPlayer
    %sprite.attributes;
    autoStart (true | false) 'false'
    preventFullScreen (true | false) 'false'
    video CDATA #IMPLIED
    includeCaptionControls (true | false) 'true'
    showCaptionMenu (true | false) 'true'
>
<!-- Defines a button with a popup overlay to control muting and volume settings of media.
-->
<!ELEMENT VolumeControl EMPTY>
<!-- @attr animated Whether the list should animate when opening.
     @attr iconAlignmentH The horizontal alignment of the icon within the button's dimensions.
     @attr iconAlignmentV The vertical alignment of the icon within the button's dimensions.
     @attr iconName The name of icon to use for the button when audio is audible.
     @attr mutedIconName The name of icon to use for the button when audio is muted.
     @attr iconOffsetX The pixel offset on the x axis to apply to the icon.
     @attr iconOffsetY The pixel offset on the y axis to apply to the icon.
     @attr iconScale The percentage of the icon size at which to render the icon.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr mediaController The media controller (e.g., VideoPlayer, VideoDisplay, AudioPlayer) to receive events from and control playback of.
     @attr showBack Whether the background of the graphic should be shown.
     @attr tooltip The tooltip to display on rollover of control when audio is audible.
     @attr mutedTooltip The tooltip to display on rollover of control when audio is muted.
     @attr popupHeight The height of the popup control with volume slider.
     @attr size Deprecated.
     @attr sliderHeight The height of the volume slider in the popup.
     @attr horizontalPadding The horizontal padding around the controls in the popup.
     @attr verticalPadding The vertical padding around the controls in the popup.
     @attr direction The direction the rollover popup should be placed in relation to the button
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.
     @attr popupGutter The pixel space between the button and popup slider that appears on rollover.
     @attr useOverlayLayer Whether the popup slider should be rendered on a layer above all UI elements.
     @attr useZeroWidth Whether the slider itself on the track is not rendered as a button, but appears hidden.
     @attr tabIndex The index of the element in the player tab order.
     @attr accessibleName The text read by screenreader when element received focus.
-->
<!ATTLIST VolumeControl
    %sprite.attributes;
    animated (true | false) 'true'
    iconAlignmentH (right | center | left) 'center'
    iconAlignmentV (top | middle | bottom) 'middle'
    iconOffsetX CDATA '0'
    iconOffsetY CDATA '0'
    iconName CDATA #IMPLIED
    mediaController CDATA #IMPLIED
    mutedIconName CDATA #IMPLIED
    iconScale CDATA '1'
    popupHeight CDATA '80'
    sliderHeight CDATA '13'
    horizontalPadding CDATA '5'
    verticalPadding CDATA '3'
    showBack (true | false) 'true'
    size CDATA #IMPLIED
    tooltip CDATA #IMPLIED
    mutedTooltip CDATA #IMPLIED
    direction (up | down | auto) 'auto'
    popupGutter CDATA '0'
    useOverlayLayer (true | false) 'true'
    useZeroWidth (true | false) 'false'
    tabIndex CDATA #IMPLIED
    accessibleName CDATA #IMPLIED
>

<!-- Defines a button with a menu to enable/disable captions, and select language
-->
<!ELEMENT CaptionControls EMPTY>
<!-- @attr autoSize Whether the button should automatically resize based on the amount of text.
     @attr click The function to call when the button is clicked.
     @attr data Data stored with the element that can be passed when the button is clicked.
     @attr font The font to use for the label. The font must be loaded through a style.
     @attr iconAlignmentH The horizontal alignment of the icon within the button's dimensions.
     @attr iconAlignmentV The vertical alignment of the icon within the button's dimensions.
     @attr iconName The name of icon to use for the button.
     @attr iconOffsetX The pixel offset on the x axis to apply to the icon.
     @attr iconOffsetY The pixel offset on the y axis to apply to the icon.
     @attr iconScale The percentage of the icon size at which to render the icon.
     @attr includeInLayout Whether the element should be included in the rendering and the size and position calculations.
     @attr label The text to display on the button.
     @attr labelAlignmentH The horizontal alignment of the label within the button's dimensions.
     @attr labelAlignmentV The vertical alignment of the label within the button's dimensions.
     @attr labelBuffer The distance in pixels between the edge of the button and its label.
     @attr labelOffsetX The pixel offset on the x axis to apply to the label.
     @attr labelOffsetY The pixel offset on the y axis to apply to the label.
     @attr lockHeight Used with autoSize, locks the height of the button to the specified pixel height, allowing the button to resize only horizontally.
     @attr maxWidth Used with autoSize, sets the maximum width the button can be before it begins to truncate its label.
     @attr multiline Whether the button label should display multiple lines of text.
     @attr showBack Whether the background of the graphic should be shown.
     @attr size The size of the text to display, in points.
     @attr toggled Whether the button is toggled into its selected state, used with binding.
     @attr toggledClick The function to call when the button is clicked when in toggled state.
     @attr toggledIconName The name of icon to use for the button.
     @attr toggledLabel The text to display on the button when in toggled state.
     @attr toggledTooltip The tooltip to display on rollover of the text when in toggled state.
     @attr tooltip The tooltip to display on rollover of the text.
     @attr truncateLabel Whether the label should display an elipsis (...) when the text to display exceeds the button's width.
     @attr height The height of the element in percent or pixels.
     @attr id An identifier by which you can refer to the element from other elements or when using CSS or the APIs
     @attr width The width of the element in pixels or percent.
     @attr x The horizontal position of the element, in pixels from the lower left.
     @attr y The vertical position of the element, in pixels from the lower left.
     @attr theme The name of the theme to apply to the element.
     @attr style Inline CSS to apply to the element
     @attr styleFile The URL of a CSS file containing the style to apply to the element.
     @attr alpha The opacity of the component between 0 and 1.
     @attr blendMode The ActionScript DisplayObject blend mode of the component. 
     @attr depth The depth of the component in levels.
     @attr enabled Whether a component will receive mouse events.
     @attr rotation The rotation of the component in degrees.
     @attr visible Whether the component should be visible.
     @attr tabIndex The index of the element in the player tab order.
     @attr accessibleName The text read by screenreader when element received focus.
-->
<!ATTLIST CaptionControls
     %sprite.attributes;
    autoSize (true | false) 'false'
    click CDATA #IMPLIED
    data CDATA #IMPLIED
    font CDATA #IMPLIED
    hoverMenu CDATA #IMPLIED
    iconAlignmentH (right | center | left) 'center'
    iconAlignmentV (top | middle | bottom) 'middle'
    iconOffsetX CDATA '0'
    iconOffsetY CDATA '0'
    iconName CDATA #IMPLIED
    iconScale CDATA '1'
    label CDATA #IMPLIED
    labelAlignmentH (left | center | right) 'center'
    labelAlignmentV (top | middle | bottom) 'middle'
    labelBuffer CDATA '0'
    labelOffsetX CDATA '0'
    labelOffsetY CDATA '0'
    lockHeight (true | false) 'false'
    maxWidth CDATA #IMPLIED
    multiline (true | false) 'false'
    showBack (true | false) 'true'
    size CDATA #IMPLIED
    toggled CDATA 'false'
    toggledClick CDATA #IMPLIED
    toggledIconName CDATA #IMPLIED
    toggledLabel CDATA #IMPLIED
    toggledTooltip CDATA #IMPLIED
    tooltip CDATA #IMPLIED
    truncateLabel (true | false) 'false'
    tabIndex CDATA #IMPLIED
    accessibleName CDATA #IMPLIED
>
