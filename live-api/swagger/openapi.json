{
  "openapi": "3.0.0",
  "info": {
    "title": "Live API Reference",
    "description": "Reference for the Brightcove Live API, used to create and manage live streaming events.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.bcovlive.io",
      "variables": {

      }
    }
  ],
  "paths": {
    "/v1/jobs": {
      "post": {
        "tags": [
          "Live Jobs"
        ],
        "summary": "Create_a_Live_Job",
        "description": "Create a live stream ",
        "operationId": "CreateALiveJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "requestBody": {
          "description": "Create a live stream",
          "content": {
            "application/json": {
              "schema": {
                "description": "Create a live stream",
                "$ref": "#/components/schemas/CreateLiveJobRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/LiveJob"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "get": {
        "tags": [
          "Live Jobs"
        ],
        "summary": "List_Live_Jobs",
        "description": "List live jobs - for additional useful information on the search filters, see [Getting a List of Live or VOD Jobs](https://support.brightcove.com/getting-list-live-or-vod-jobs)",
        "operationId": "ListLiveJobs",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          },
          {
            "name": "start_token",
            "in": "query",
            "description": "Next token from previous page; do not specify when fetching first page",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Max number of jobs to return in one request (1-1000, default is 10)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Attribute to sort jobs by (`created_at` | `modified_at`, default is `created_at`)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "modified_at"
              ],
              "default": "created_at"
            }
          },
          {
            "name": "sort_dir",
            "in": "query",
            "description": "Sort direction (default is asc):`asc` - ascending; `desc` - descending",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter results by one or more user IDs",
            "style": "form",
            "explode": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "User id"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "User id"
                  }
                }
              ]
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "description": "Filter results by particular account, or specify ‘*’ to search all accounts.  Default value is account API key belongs to",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "description": "Filter results by Unix time of job creation (in milliseconds)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "modified_at",
            "in": "query",
            "description": "Filter results by Unix time of job last modified (in milliseconds)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ad_insertion",
            "in": "query",
            "description": "Filter results by is SSAI enabled",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "static",
            "in": "query",
            "description": "Filter results by has static endpoint",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter results by one or more job states",
            "style": "form",
            "explode": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "Job state",
                  "enum": [
                    "standby",
                    "waiting",
                    "processing",
                    "disconnected",
                    "cancelling",
                    "finishing",
                    "cancelled",
                    "finished",
                    "failed"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Job state",
                    "enum": [
                      "standby",
                      "waiting",
                      "processing",
                      "disconnected",
                      "cancelling",
                      "finishing",
                      "cancelled",
                      "finished",
                      "failed"
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "ssai_state",
            "in": "query",
            "description": "Filter results by one or more SSAI states",
            "style": "form",
            "explode": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "SSAI job state",
                  "enum": [
                    "none",
                    "ready",
                    "waiting_input",
                    "start_transcoding",
                    "transcoding",
                    "error"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "SSAI job state",
                    "enum": [
                      "none",
                      "ready",
                      "waiting_input",
                      "start_transcoding",
                      "transcoding",
                      "error"
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "region",
            "in": "query",
            "description": "Filter results by one or more regions",
            "style": "form",
            "explode": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "region",
                  "enum": [
                    "us-west-2",
                    "us-east-1",
                    "ap-southeast-2",
                    "ap-northeast-1",
                    "ap-southeast-1",
                    "eu-central-1",
                    "eu-west-1",
                    "sa-east-1"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "region",
                    "enum": [
                      "us-west-2",
                      "us-east-1",
                      "ap-southeast-2",
                      "ap-northeast-1",
                      "ap-southeast-1",
                      "eu-central-1",
                      "eu-west-1",
                      "sa-east-1"
                    ]
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListLiveJobs200"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/jobs/{job_id}": {
      "get": {
        "tags": [
          "Live Jobs"
        ],
        "summary": "Get_Live_Job_Details",
        "description": "Get Live Job Details ",
        "operationId": "GetLiveJobDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/JobId"
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/jobs/{job_id}/activate": {
      "put": {
        "tags": [
          "Live Jobs"
        ],
        "summary": "Activate_SEP_Stream",
        "description": "Activate SEP (static entry point) Stream ",
        "operationId": "ActivateSepStream",
        "parameters": [
          {
            "$ref": "#/components/parameters/JobId"
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivateSepStream200"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/jobs/{job_id}/deactivate": {
      "put": {
        "tags": [
          "Live Jobs"
        ],
        "summary": "Deactivate_SEP_Stream",
        "description": "Deactivate SEP (static entry point) Stream ",
        "operationId": "DeactivateSepStream",
        "parameters": [
          {
            "$ref": "#/components/parameters/JobId"
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateSepStream200"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/jobs/{job_id}/cuepoint": {
      "post": {
        "tags": [
          "Live Jobs"
        ],
        "summary": "Manual_Ad_Cue_Point_Insertion",
        "description": "Inserts a manual Cue-Out with a duration to the Live ingest point. ",
        "operationId": "ManualAdCuePointInsertion",
        "parameters": [
          {
            "$ref": "#/components/parameters/JobId"
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "requestBody": {
          "description": "Inserts a manual Cue-Out with a duration to the Live ingest point.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualAdCuePointInsertionbody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManualAdCuePointInsertion200"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details "
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details "
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: DB getItem, no results found - see Live API Error Messages for more details "
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/jobs/{job_id}/id3tag": {
      "post": {
        "tags": [
          "Live Jobs"
        ],
        "summary": "Insert_ID3_timed_metadata",
        "description": "Inserts an ID3 timed metadata tag for an ongoing job. Note that: 1) If using timecode property, the job only stores the most recent request for insertion; 2) If using timecode property, the encoder must be sending SMPTE-formatted (HH:MM:SS:FF) timecode stored in the tc property via OnFI ",
        "operationId": "InsertId3TimedMetadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/JobId"
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "requestBody": {
          "description": "Inserts an ID3 timed metadata tag for an ongoing job. Note that: 1) If using timecode property, the job only stores the most recent request for insertion; 2) If using timecode property, the encoder must be sending SMPTE-formatted (HH:MM:SS:FF) timecode stored in the tc property via OnFI",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InsertId3TimedMetadatabody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsertId3TimedMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/jobs/{job_id}/cancel": {
      "put": {
        "tags": [
          "Live Jobs"
        ],
        "summary": "Cancel_Live_Job",
        "description": "Cancel a live stream ",
        "operationId": "CancelLiveJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/JobId"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/CancelLiveJob"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/vods": {
      "post": {
        "tags": [
          "Clips"
        ],
        "summary": "Create_VOD_Clip",
        "description": "Create VOD clips from a Live Stream. ",
        "operationId": "CreateVodClip",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "requestBody": {
          "description": "Create VOD clips from a Live Stream.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Create VOD clips from a Live Stream.",
                "$ref": "#/components/schemas/CreateVodClipbody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/VodJobs"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/jobs/{job_id}/vods": {
      "get": {
        "tags": [
          "Clips"
        ],
        "summary": "List_VOD_Clips",
        "description": "List VOD clips for a Live Stream - for additional useful information on the search filters, see [Getting a List of Live or VOD Jobs](https://support.brightcove.com/getting-list-live-or-vod-jobs)",
        "operationId": "ListVodClips",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          },
          {
            "$ref": "#/components/parameters/JobId"
          },
          {
            "name": "start_token",
            "in": "query",
            "description": "Next token from previous page; do not specify when fetching first page",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Max number of clips to return in one request (1-1000, default is 10)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Attribute to sort jobs by (`created_at` | `modified_at`, default is `created_at`)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "modified_at"
              ],
              "default": "created_at"
            }
          },
          {
            "name": "sort_dir",
            "in": "query",
            "description": "Sort direction (default is asc):`asc` - ascending; `desc` - descending",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter results by one or more user IDs",
            "style": "form",
            "explode": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "User id"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "User id"
                  }
                }
              ]
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "description": "Filter results by particular account, or specify ‘*’ to search all accounts.  Default value is account API key belongs to",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "description": "Filter results by Unix time of job creation (in milliseconds)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "modified_at",
            "in": "query",
            "description": "Filter results by Unix time of job last modified (in milliseconds)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "jvod_state",
            "in": "query",
            "description": "Filter results by one or more VOD job states",
            "style": "form",
            "explode": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "VOD Job state",
                  "enum": [
                    "error",
                    "waiting",
                    "waiting_finish_live",
                    "processing",
                    "cancelling",
                    "cancelled",
                    "finished",
                    "failed",
                    "creating_asset"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "VOD Job state",
                    "enum": [
                      "error",
                      "waiting",
                      "waiting_finish_live",
                      "processing",
                      "cancelling",
                      "cancelled",
                      "finished",
                      "failed",
                      "creating_asset"
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "jvod_type",
            "in": "query",
            "description": "Filter results by one or more VOD job types",
            "style": "form",
            "explode": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "VOD Job type",
                  "enum": [
                    "s3",
                    "ftp",
                    "instant",
                    "error"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "VOD Job type",
                    "enum": [
                      "s3",
                      "ftp",
                      "instant",
                      "error"
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "Filter results by one or more VOD job labels",
            "style": "form",
            "explode": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "VOD job label",
                  "enum": [
                    "none",
                    "ready",
                    "waiting_input",
                    "start_transcoding",
                    "transcoding",
                    "error"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "VOD job label",
                    "enum": [
                      "none",
                      "ready",
                      "waiting_input",
                      "start_transcoding",
                      "transcoding",
                      "error"
                    ]
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/ListVodJobs"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Clips"
        ],
        "summary": "Create_VOD_Clip2",
        "description": "Create VOD clips from a Live Stream. ",
        "operationId": "CreateVodClip2",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          },
          {
            "$ref": "#/components/parameters/JobId"
          }
        ],
        "requestBody": {
          "description": "Create VOD clips from a Live Stream.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Create VOD clips from a Live Stream.",
                "$ref": "#/components/schemas/CreateVodClipbody-Alternate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/VodJobs"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/ssai/applications": {
      "post": {
        "tags": [
          "SSAI"
        ],
        "summary": "Create_Ad_Configuration",
        "description": "Create a configuration for server-side ad application. ",
        "operationId": "CreateAdConfiguration",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "requestBody": {
          "description": "Create a configuration for server-side ad application.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Create a configuration for server-side ad application.",
                "$ref": "#/components/schemas/CreateAdConfigurationbody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "get": {
        "tags": [
          "SSAI"
        ],
        "summary": "Get_Ad_Configurations",
        "description": "Get ad applications for the current user.",
        "operationId": "GetuserAdConfigurations",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/ssai/applications/account/{account_id}": {
      "get": {
        "tags": [
          "SSAI"
        ],
        "summary": "Get_Account_Ad_Configurations",
        "description": "Get ad applications for an account. ",
        "operationId": "GetAccountAdConfigurations",
        "parameters": [
          {
            "$ref": "#/components/parameters/LiveAccountId"
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/ssai/applications/application/{application_id}": {
      "get": {
        "tags": [
          "SSAI"
        ],
        "summary": "Get_Ad_Configuration",
        "description": "Get an ad application. ",
        "operationId": "GetAdConfiguration",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "The ad application id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "tags": [
          "SSAI"
        ],
        "summary": "Update_Ad_Configuration",
        "description": "Update a configuration for server-side ad application. ",
        "operationId": "UpdateAdConfiguration",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "The ad application id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "requestBody": {
          "description": "Update a configuration for server-side ad application.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Update a configuration for server-side ad application.",
                "$ref": "#/components/schemas/UpdateAdConfigurationbody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "SSAI"
        ],
        "summary": "Delete_Ad_Configuration",
        "description": "Delete an ad application. ",
        "operationId": "DeleteAdConfiguration",
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "description": "The ad application id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/DeleteAdConfiguration200"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/ssai/beaconsets": {
      "post": {
        "tags": [
          "SSAI"
        ],
        "summary": "Create_beacon_set",
        "description": "Beacons are data points on playback sent to ad servers to track whether and how much of ads were played. Creates a beacon set. ",
        "operationId": "CreateBeaconSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "requestBody": {
          "description": "Beacons are data points on playback sent to ad servers to track whether and how much of ads were played. Creates a beacon set.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Beacons are data points on playback sent to ad servers to track whether and how much of ads were played. Creates a beacon set.",
                "$ref": "#/components/schemas/CreateBeaconSetbody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/CreateBeaconSetResponse"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "get": {
        "tags": [
          "SSAI"
        ],
        "summary": "Get_beacon_sets_for_user",
        "description": "Get all beacon sets for the requesting user. ",
        "operationId": "GetBeaconSetsForUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeaconSets"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/ssai/beaconsets/beaconset/beacon_set_id": {
      "put": {
        "tags": [
          "SSAI"
        ],
        "summary": "Update_beacon_set",
        "description": "Updates a beacon set. ",
        "operationId": "UpdateBeaconSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/BeaconSetId"
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "requestBody": {
          "description": "Updates a beacon set.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Updates a beacon set.",
                "$ref": "#/components/schemas/UpdateBeaconSetbody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/BeaconSet"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "SSAI"
        ],
        "summary": "Delete_beacon_set",
        "description": "Deletes a beacon set. ",
        "operationId": "DeleteBeaconSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/BeaconSetId"
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/DeleteBeaconSet200"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/ssai/beaconsets/account/{account_id}": {
      "get": {
        "tags": [
          "SSAI"
        ],
        "summary": "Get_beacon_sets",
        "description": "Get all beacon sets for an account. ",
        "operationId": "GetBeaconSets",
        "parameters": [
          {
            "$ref": "#/components/parameters/LiveAccountId"
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/BeaconSet"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/ssai/slates": {
      "post": {
        "tags": [
          "SSAI"
        ],
        "summary": "Ingest_Slate_Media_Source_Asset",
        "description": "Ingest Slate Media Source Asset. ",
        "operationId": "IngestSlateMediaSourceAsset",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "requestBody": {
          "description": "Ingest Slate Media Source Asset.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Ingest Slate Media Source Asset.",
                "$ref": "#/components/schemas/IngestSlateMediaSourceAssetbody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/IngestSlateMediaSourceAssetResponse"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "get": {
        "tags": [
          "SSAI"
        ],
        "summary": "Get_User_Slate_Media_Source_Assets",
        "description": "Get Slate Media Source Assets for the current user. ",
        "operationId": "GetUserSlateMediaSourceAssets",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/GetSlateMediaSourceAssets200"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/ssai/slates/slate{slate_msa_id}": {
      "delete": {
        "tags": [
          "SSAI"
        ],
        "summary": "Delete_Slate_Media_Source_Asset",
        "description": "Delete Slate Media Source Asset. ",
        "operationId": "DeleteSlateMediaSourceAsset",
        "parameters": [
          {
            "$ref": "#/components/parameters/SlateMsaId"
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/DeleteSlateMediaSourceAsset200"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/ssai/slates/account/{account_id}": {
      "get": {
        "tags": [
          "SSAI"
        ],
        "summary": "Get_slates_for_account",
        "description": "Get all beacon sets for an account. ",
        "operationId": "GetSlatesForAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/LiveAccountId"
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/GetSlateMediaSourceAssets200"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/credentials": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "summary": "List_Credentials",
        "description": "This endpoint can be used to get user credentials for a given user provided one has an API key. ",
        "operationId": "ListCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/ListCredentials"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "tags": [
          "Credentials"
        ],
        "summary": "Create_Credential",
        "description": "Create a new credential. ",
        "operationId": "CreateCredential",
        "parameters": [
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "requestBody": {
          "description": "Create a new credential.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Create a new credential.",
                "$ref": "#/components/schemas/CreateCredentialbody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/CreateCredential"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/credentials/{credential_id}": {
      "put": {
        "tags": [
          "Credentials"
        ],
        "summary": "Update_Credential",
        "description": "Update a credential. ",
        "operationId": "UpdateCredential",
        "parameters": [
          {
            "$ref": "#/components/parameters/CredentialId"
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "requestBody": {
          "description": "Update a credential.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Update a credential.",
                "$ref": "#/components/schemas/UpdateCredentialbody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "$ref": "#/components/schemas/UpdateCredential"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid input value - see Live API Error Messages for more details"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "tags": [
          "Credentials"
        ],
        "summary": "Delete_Credential",
        "description": "Delete a credential. ",
        "operationId": "DeleteCredential",
        "parameters": [
          {
            "$ref": "#/components/parameters/CredentialId"
          },
          {
            "$ref": "#/components/parameters/ContentType"
          },
          {
            "$ref": "#/components/parameters/XAPIKEY"
          }
        ],
        "responses": {
          "204": {
            "description": "NO_CONTENT: the credential was deleted"
          },
          "401": {
            "description": "UNAUTHORIZED: Unauthorized - see Live API Error Messages for more details"
          },
          "404": {
            "description": "RESOURCE_NOT_FOUND: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR: see Live API Error Messages for more details"
          }
        },
        "deprecated": false,
        "security": [

        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivateSepStream200": {
        "properties": {
          "id": {
            "description": "The job id for the stream that was activated",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "Activate_SEP_Stream200",
        "type": "object"
      },
      "AddCdns": {
        "properties": {
          "label": {
            "description": "A label to identify the CDN.",
            "type": "string"
          },
          "prepend": {
            "description": "Typically, a domain or path to prepend to addresses",
            "type": "string"
          },
          "protocol": {
            "description": "Protocol to use in sending the stream to the CDN.",
            "type": "string"
          }
        },
        "required": [
          "label",
          "prepend",
          "protocol"
        ],
        "title": "add_cdns",
        "type": "object"
      },
      "Application": {
        "properties": {
          "account_id": {
            "description": "The account id",
            "type": "string"
          },
          "application_ad_configuration": {
            "$ref": "#/components/schemas/Application.applicationAdConfiguration"
          },
          "application_id": {
            "description": "The ad application id",
            "type": "string"
          },
          "description": {
            "description": "The ad application description",
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "description",
          "application_ad_configuration",
          "application_id"
        ],
        "title": "application",
        "type": "object"
      },
      "Application.applicationAdConfiguration": {
        "properties": {
          "ad_configuration_description": {
            "description": "The ad configuration description",
            "type": "string"
          },
          "ad_configuration_strategy": {
            "description": "The ad configuration strategy (SingleAdResponse, or MultipleAdResponse)",
            "type": "string"
          },
          "ad_configuration_transforms": {
            "description": "The ad configuration transforms",
            "items": {
              "$ref": "#/components/schemas/Application.applicationAdConfiguration.adConfigurationTransforms"
            },
            "type": "array"
          },
          "ad_configuration_url_format": {
            "description": "The URL template for the ad server",
            "type": "string"
          },
          "ad_configuration_variables": {
            "description": "Key/value pairs for the ad server URL template",
            "type": "object"
          },
          "headers": {
            "description": "The ad configuration headers",
            "type": "object"
          },
          "response_type": {
            "description": "The ad configuration response type (Dfp, Vast, or SmartXML)",
            "type": "string"
          }
        },
        "required": [
          "ad_configuration_description",
          "response_type",
          "headers",
          "ad_configuration_strategy",
          "ad_configuration_transforms",
          "ad_configuration_url_format",
          "ad_configuration_variables"
        ],
        "title": "application.application_ad_configuration",
        "type": "object"
      },
      "Application.applicationAdConfiguration.adConfigurationTransforms": {
        "properties": {
          "xpath": {
            "description": "The ad configuration transform xpath",
            "type": "string"
          },
          "xslt": {
            "description": "The ad configuration transform xslt",
            "type": "string"
          }
        },
        "required": [
          "xpath",
          "xslt"
        ],
        "title": "application.application_ad_configuration.ad_configuration_transforms",
        "type": "object"
      },
      "BeaconSet": {
        "properties": {
          "account_id": {
            "description": "The Live account id",
            "type": "string"
          },
          "beacon_urls": {
            "description": "Array of beacon URLs",
            "items": {
              "$ref": "#/components/schemas/BeaconSet.beaconUrls"
            },
            "type": "array"
          }
        },
        "required": [
          "beacon_urls"
        ],
        "title": "beacon_set",
        "type": "object"
      },
      "BeaconSet.beaconUrls": {
        "properties": {
          "beacon_type": {
            "description": "Beacon type",
            "type": "string"
          },
          "beacon_url": {
            "description": "Beacon URL",
            "type": "string"
          }
        },
        "required": [
          "beacon_url",
          "beacon_type"
        ],
        "title": "beacon_set.beacon_urls",
        "type": "object"
      },
      "BeaconSets": {
        "items": {
          "$ref": "#/components/schemas/BeaconSet"
        },
        "required": [
          "beacon_set_id",
          "account_id"
        ],
        "title": "beacon_sets",
        "type": "array"
      },
      "CancelLiveJob": {
        "properties": {
          "id": {
            "description": "The job id for the stream that was stopped",
            "type": "string"
          }
        },
        "title": "Cancel_Live_Job200",
        "type": "object"
      },
      "CreateAdConfigurationbody": {
        "properties": {
          "account_id": {
            "description": "Your Live account id (if you leave this blank, the request will still work)",
            "type": "string"
          },
          "ad_configuration_url_format": {
            "description": "Format for the ad tag - see SSAI Using the Brightcove Live API for the available ad configuration variables.",
            "type": "string"
          },
          "application_ad_configuration": {
            "$ref": "#/components/schemas/CreateAdConfigurationbody.applicationAdConfiguration"
          },
          "application_description": {
            "description": "Human readable description of the ad application.",
            "type": "string"
          }
        },
        "required": [
          "application_ad_configuration",
          "ad_configuration_url_format",
          "application_description"
        ],
        "title": "Create_Ad_ConfigurationBody",
        "type": "object"
      },
      "CreateAdConfigurationbody.applicationAdConfiguration": {
        "properties": {
          "ad_configuration_description": {
            "description": "Human readable description of the configuration.",
            "type": "string"
          },
          "ad_configuration_expected_response_type": {
            "description": "The expected response type based on your ad server",
            "type": "string"
          },
          "ad_configuration_headers": {
            "description": "An optional JSON object that can contain zero or more key-value-pairs, for which both key and value must be strings.  All of the standard URL substitutions are valid for headers.",
            "type": "object"
          },
          "ad_configuration_headers_for_impressions": {
            "description": "If true, this configuration will send headers on all ad requests and impressions; if false, headers will not be sent on impressions (quartiles/impressions that we fire for tracking from an ad response).",
            "type": "boolean"
          },
          "ad_configuration_strategy": {
            "description": "Specifies whether ad breaks should include single or muliple ads",
            "type": "string"
          },
          "ad_configuration_transforms": {
            "description": "Array of ad configuration transforms.",
            "items": {
              "$ref": "#/components/schemas/CreateAdConfigurationbody.applicationAdConfiguration.adConfigurationTransforms"
            },
            "type": "array"
          }
        },
        "required": [
          "ad_configuration_description",
          "ad_configuration_expected_response_type",
          "ad_configuration_strategy",
          "ad_configuration_transforms"
        ],
        "title": "Create_Ad_ConfigurationBody.application_ad_configuration",
        "type": "object"
      },
      "CreateAdConfigurationbody.applicationAdConfiguration.adConfigurationTransforms": {
        "properties": {
          "xpath": {
            "description": "xpath for the transform.",
            "type": "string"
          },
          "xslt": {
            "description": "xslt stylesheet for the transform.",
            "type": "string"
          }
        },
        "required": [
          "xpath",
          "xslt"
        ],
        "title": "Create_Ad_ConfigurationBody.application_ad_configuration.ad_configuration_transforms",
        "type": "object"
      },
      "CreateBeaconSetResponse": {
        "properties": {
          "account_id": {
            "description": "The Live account id",
            "type": "string"
          },
          "beacon_urls": {
            "description": "Array of beacon URLs",
            "items": {
              "$ref": "#/components/schemas/BeaconSet.beaconUrls"
            },
            "type": "array"
          },
          "inserted": {
            "description": "Whether the beacon set was successfully added",
            "type": "boolean"
          }
        },
        "required": [
          "beacon_urls"
        ],
        "title": "beacon_set",
        "type": "object"
      },
      "CreateBeaconSetbody": {
        "properties": {
          "account_id": {
            "description": "Account id",
            "type": "string"
          },
          "beacon_urls": {
            "description": "Array of beacon URLs",
            "items": {
              "$ref": "#/components/schemas/CreateBeaconSetbody.beaconUrls"
            },
            "type": "array"
          }
        },
        "required": [
          "beacon_urls"
        ],
        "title": "Create_beacon_setBody",
        "type": "object"
      },
      "CreateBeaconSetbody.beaconUrls": {
        "properties": {
          "beacon_type": {
            "description": "the beacon type - see ( https://support.brightcove.com/node/17763#Beacons) for the valid beacon types",
            "type": "string"
          },
          "beacon_url": {
            "description": "URL format for the beacon - see ( https://support.brightcove.com/node/17763#Beacons) for the valid beacon variables",
            "type": "string"
          }
        },
        "required": [
          "beacon_url",
          "beacon_type"
        ],
        "title": "Create_beacon_setBody.beacon_urls",
        "type": "object"
      },
      "CreateCredential": {
        "properties": {
          "credential_id": {
            "description": "The credential id",
            "type": "string"
          },
          "user_id": {
            "description": "The user id",
            "type": "string"
          }
        },
        "required": [
          "credential_id",
          "user_id"
        ],
        "title": "Create_Credential200",
        "type": "object"
      },
      "CreateCredentialbody": {
        "properties": {
          "credential_default_for_type": {
            "description": "Whether these are the default credentials for the request type",
            "type": "boolean"
          },
          "credential_label": {
            "description": "Label for the credential",
            "type": "string"
          },
          "credential_private": {
            "description": "Private key or password depending on the type",
            "type": "string"
          },
          "credential_public": {
            "description": "Public key or password depending on the type",
            "type": "string"
          },
          "credential_type": {
            "description": "The credential type",
            "enum": [
              "ftp",
              "oauth",
              "s3",
              "videocloud",
              "zencoder"
            ],
            "type": "string"
          },
          "oauth_settings": {
            "$ref": "#/components/schemas/CreateCredentialbody.oauthSettings",
            "description": "OAuth settings for OAuth credentials needed to send notifications to a notification URL Required for oauth type credentials"
          },
          "user_id": {
            "description": "GUID for which the credentials are being created.",
            "type": "string"
          }
        },
        "required": [
          "user_id",
          "credential_default_for_type",
          "credential_label",
          "credential_type",
          "credential_private",
          "credential_public"
        ],
        "title": "Create_CredentialBody",
        "type": "object"
      },
      "CreateCredentialbody.oauthSettings": {
        "properties": {
          "url": {
            "description": "OAuth access token URL for OAuth credentials needed to send notifications to a notification URL",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "title": "Create_CredentialBody.oauth_settings",
        "type": "object"
      },
      "CreateLiveJobRequestBody": {
        "properties": {
          "ad_audio_loudness_level": {
            "description": "Adjust the loudness level of the audio. This is measured in LUFS and specified in dB. This is useful to set the output loudness level to conform to a standard (-23dB for EBU R.128) The recommended setting is -23.",
            "maximum": 60,
            "minimum": -60,
            "type": "number"
          },
          "ad_insertion": {
            "default": false,
            "description": "Setting this parameter to true will enable server side ad insertion (SSAI) on the job. Current support includes, DFP, Freewheel, or any VAST 2.0/3.0 ad tags.",
            "type": "boolean"
          },
          "add_cdns": {
            "description": "Array of additional CDN providers to be used for manifest generation. For each CDN provided, the manifest will be prepended accordingly",
            "items": {
              "$ref": "#/components/schemas/CreateLiveJobRequestBody.addCdns"
            },
            "type": "array"
          },
          "beacon_set": {
            "description": "ID for a beacon set (for SSAI only).",
            "type": "string"
          },
          "channel_type": {
            "default": "event",
            "description": "Indicates whether the job should be billed as `event` hours or a channel (`24x7`) - see [Channels and Event Hours](https://support.brightcove.com/overview-brightcove-live-api#Channels_and_hours).",
            "enum": [
              "24x7",
              "event"
            ],
            "type": "string"
          },
          "encryption": {
            "$ref": "#/components/schemas/CreateLiveJobRequestBody.encryption",
            "description": "Encryption to apply to the stream."
          },
          "event_length": {
            "default": 0,
            "description": "Used to preset and define an end time for the live event. At any point within the specified `event_length` you may reconnect to your stream. The `event_length` setting goes into effect as soon as streaming begins.",
            "maximum": 93600,
            "minimum": 0,
            "type": "integer"
          },
          "hls_endlist": {
            "default": true,
            "description": "Whether an `EXT-X-ENDLIST` tag should be added to the stream playlist when you stop the stream or the `reconnect_time` window has been reached. The `EXT-X-ENDLIST` tag indicates that no more Media Segments will be added to the Media Playlist file and helps prevent the player from displaying error messages when the stream stops.",
            "type": "boolean"
          },
          "live_dvr_ads_window_duration": {
            "default": 100,
            "description": "The time, in seconds, to keep in the live DVR manifest. If the stream duration is longer than the window duration, segment references will be removed first in first out. Default is `100` seconds.",
            "maximum": 600,
            "minimum": 0,
            "type": "integer"
          },
          "live_dvr_sliding_window_duration": {
            "default": 100,
            "description": "The time, in seconds, to keep in the live DVR manifest. If the stream duration is longer than the window duration, segment references will be removed first in first out. Default is 100 seconds. **Note: for SSAI jobs, the limit is `7200`.",
            "maximum": 86400,
            "minimum": 0,
            "type": "integer"
          },
          "live_stream": {
            "description": "Indicates that the job is a live streaming job.",
            "type": "boolean"
          },
          "max_hls_protocol_version": {
            "default": 3,
            "description": "Sets the maximum HLS protocol version to use. Special features will be used as available. Default is `3`.",
            "maximum": 5,
            "minimum": 1,
            "type": "integer"
          },
          "notifications": {
            "description": "Array of notification destination objects or strings - notifications defined here are for job-level events.  A notification will be sent to the destination when selected event occurs. You can use a simple string with a url: &quot;http://log:pass@httpbin.org/post&quot;, or you can use an object. See [Events](https://support.brightcove.com/live-api-notifications#Events) for an explanation of the events reported in `state_changed` notifications.",
            "items": {
              "oneOf": [
                {
                  "properties": {
                    "event": {
                      "description": "The type of event to send notifications for",
                      "enum": [
                        "state_changed",
                        "first_segment_uploaded",
                        "output_finished"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "array"
          },
          "outputs": {
            "description": "Array of output specifications for live and VOD assets to be created from the live stream.",
            "items": {
              "$ref": "#/components/schemas/CreateLiveJobRequestBody.outputs"
            },
            "type": "array"
          },
          "reconnect_time": {
            "default": 30,
            "description": "The time, in seconds, to wait for a stream to reconnect to the encoder. If the reconnect time passes without the stream reconnecting, the job will automatically finish.",
            "maximum": 7200,
            "minimum": 1,
            "type": "integer"
          },
          "region": {
            "description": "AWS region - you can also specify region as the alias for a list set up for the account by Brightcove Support. See [Supported AWS Regions] (https://support.brightcove.com/overview-brightcove-live-api#Support_aws_regions) for more details on the support in each region.",
            "enum": [
              "us-west-2",
              "us-east-1",
              "ap-southeast-2",
              "ap-northeast-1",
              "ap-southeast-1",
              "eu-central-1",
              "eu-west-1",
              "sa-east-1"
            ],
            "type": "string"
          },
          "rtmp_ip_whitelist": {
            "description": "Array of IP addresses white-listed for RTMP delivery",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "slate": {
            "description": "Id for a set of slate assets",
            "type": "string"
          },
          "static": {
            "default": false,
            "description": "Whether this is a static entry point (SEP) job",
            "type": "boolean"
          }
        },
        "required": [
          "live_stream",
          "region",
          "outputs"
        ],
        "title": "Create_Live_JobBody",
        "type": "object"
      },
      "CreateLiveJobRequestBody.addCdns": {
        "properties": {
          "label": {
            "description": "A label to identify the CDN.",
            "type": "string"
          },
          "prepend": {
            "description": "CDN hostname to be prepended to addresses",
            "type": "string"
          },
          "protocol": {
            "description": "Protocol to use for the stream delivery",
            "enum": [
              "http",
              "https"
            ],
            "type": "string"
          },
          "token_auth": {
            "$ref": "#/components/schemas/CreateLiveJobRequestBody.addCdns.tokenAuth"
          },
          "vendor": {
            "description": "CDN vendor such as akamai",
            "type": "string"
          }
        },
        "required": [
          "label",
          "prepend",
          "protocol",
          "vendor"
        ],
        "title": "Create_Live_Job_Request_Body.add_cdns",
        "type": "object"
      },
      "CreateLiveJobRequestBody.addCdns.tokenAuth": {
        "description": "Token authentication details",
        "properties": {
          "auth_type": {
            "description": "Token authentication type - currently, the only supported value is `Akamai2.0`",
            "type": "string"
          },
          "key": {
            "description": "Your Akamai token auth password",
            "type": "string"
          },
          "media": {
            "$ref": "#/components/schemas/CreateLiveJobRequestBody.addCdns.tokenAuth.media"
          },
          "token_name": {
            "description": "Your Akamai token token name",
            "type": "string"
          }
        },
        "required": [
          "auth_type",
          "key",
          "token_name"
        ],
        "title": "Create_Live_Job_Request_Body.add_cdns.token_auth",
        "type": "object"
      },
      "CreateLiveJobRequestBody.addCdns.tokenAuth.media": {
        "description": "Object containing tokenization properites",
        "properties": {
          "end_time": {
            "description": "The time to end token auth, epoch time in seconds",
            "format": "int32",
            "type": "integer"
          },
          "start_time": {
            "default": "now",
            "description": "The time to apply token auth - &quot;now&quot; or epoch time in seconds",
            "format": "int32",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "enum": [
                  "now"
                ],
                "type": "string"
              }
            ]
          },
          "ttl": {
            "description": "The time to live in seconds - either `end_time` or `ttl` is required",
            "format": "int32",
            "type": "integer"
          }
        },
        "title": "Create_Live_Job_Request_Body.add_cdns.token_auth.media",
        "type": "object"
      },
      "CreateLiveJobRequestBody.encryption": {
        "properties": {
          "external_url": {
            "description": "The URL for the external encryption key - this field is required if you specify type as external, and the external key must match the `key` value",
            "type": "string"
          },
          "key": {
            "description": "The encryption key - either a `key`, `passphrase`, or `key_rotation` is required; if the type is `external`, `key` is required",
            "type": "string"
          },
          "key_rotation": {
            "default": false,
            "description": "Whether to use key rotation - either a `key`, `passphrase`, or `key_rotation` is required",
            "type": "boolean"
          },
          "method": {
            "description": "The encryption method to use.",
            "enum": [
              "aes-128"
            ],
            "type": "string"
          },
          "passphrase": {
            "description": "The encryption key - either a `key`, `passphrase`, or `key_rotation` is required",
            "type": "string"
          },
          "rotate_every": {
            "default": 10,
            "description": "Interval for key rotation in video segments",
            "type": "integer"
          },
          "type": {
            "description": "The encryption type, depending on whether an internal or external key server will be used.",
            "enum": [
              "internal",
              "external"
            ],
            "type": "string"
          }
        },
        "required": [
          "method",
          "type"
        ],
        "title": "Create_Live_Job_Request_Body.encryption",
        "type": "object"
      },
      "CreateLiveJobRequestBody.notifications": {
        "properties": {
          "credentials": {
            "description": "Credentials The name of the credentials configured in your account for this address",
            "type": "string"
          },
          "event": {
            "description": "Event to send the notification for.",
            "type": "string"
          },
          "url": {
            "description": "Destination for the notification.",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "title": "Create_Live_Job_Request_Body.notifications",
        "type": "object"
      },
      "CreateLiveJobRequestBody.outputs": {
        "properties": {
          "ad_audio_loudness_level": {
            "description": "Adjust the loudness level of the audio. This is measured in LUFS and specified in dB. This is useful to set the output loudness level to conform to a standard (-23dB for EBU R.128) The recommended setting is -23.",
            "maximum": 60,
            "minimum": -60,
            "type": "number"
          },
          "audio_bitrate": {
            "default": 192,
            "description": "An output bitrate setting for the audio track, in Kbps",
            "maximum": 1024,
            "minimum": 16,
            "type": "number"
          },
          "audio_codec": {
            "default": "aac",
            "description": "The output audio codec to use. Note: Only `aac` is supported.",
            "enum": [
              "aac"
            ],
            "type": "string"
          },
          "copy_audio": {
            "description": "Specifying copy_audio will take the audio track from the input video file and transmux it into the resulting output file.",
            "type": "boolean"
          },
          "copy_video": {
            "description": "Specifying copy_video will take the video track from the input video file and transmux it into the resulting output file.",
            "type": "boolean"
          },
          "credentials": {
            "description": "The name for credentials with private and public keys can be stored with Brightcove to avoid passing plain text on API requests. This is required if the S3 or FTP origins are restricted. If credentials are not provided, it will be assumed that the origin restrictions are set to public or credentials are passed along with the URL.",
            "type": "string"
          },
          "duration": {
            "description": "Clipping API option 1. Duration (in seconds) to clip back from Live. Note: Clipping API only requires one of the three options for specifying duration or time.",
            "maximum": 172800,
            "minimum": 0,
            "type": "integer"
          },
          "end_time": {
            "description": "Clipping API option 3. Universal epoch time, in seconds, to mark the end of the clip. Note: Clipping API only requires one of the three options for specifying duration or time.",
            "type": "integer"
          },
          "h264_profile": {
            "description": "H.264 has three commonly-used profiles: Baseline (lowest), Main, and High. Lower levels are easier to decode, but higher levels offer better compression. For the best compression quality, choose High. For playback on low-CPU machines or many mobile devices, choose `baseline`.",
            "enum": [
              "baseline",
              "main",
              "high"
            ],
            "type": "string"
          },
          "height": {
            "default": 480,
            "description": "Video frame height. If no height is supplied, we will use 480 pixels.",
            "type": "integer"
          },
          "keyframe_interval": {
            "description": "The maximum number of frames between each keyframe. If you set a low keyframe_interval it will increase the size / decrease the quality of your output file, but it will allow more precise scrubbing in most players. It’s recommended to have at least one keyframe per segment. If keyframe_interval is not provided, keyframes will follow the input GOP structure.",
            "maximum": 6000,
            "minimum": 1,
            "type": "integer"
          },
          "label": {
            "description": "Label for the live or VOD asset.",
            "type": "string"
          },
          "live_stream": {
            "description": "For jobs, setting live_stream to true indicates the output is a live rendition. If live_stream is false, or is not set, the output will be treated as a VOD output.",
            "type": "boolean"
          },
          "notifications": {
            "description": "Array of notification destination objects or strings - notifications defined here are for job-level events.  A notification will be sent to the destination when selected event occurs. You can use a simple string with a url: &quot;http://log:pass@httpbin.org/post&quot;, or you can use an object. See [Events](https://support.brightcove.com/live-api-notifications#Events) for an explanation of the events reported in `state_changed` notifications.",
            "items": {
              "oneOf": [
                {
                  "properties": {
                    "event": {
                      "description": "The type of event to send notifications for",
                      "enum": [
                        "state_changed",
                        "first_segment_uploaded",
                        "output_finished"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "array"
          },
          "rendition_label": {
            "description": "Indicates what rendition to use to create a VOD output (from the live job) or which renditions to use. By default, the system uses any transmuxed rendition or the highest resolution output if there is no transmuxed output.",
            "type": "string"
          },
          "segment_seconds": {
            "description": "Sets the maximum duration of each segment in a segmented output.",
            "maximum": 20,
            "minimum": 2,
            "type": "number"
          },
          "skip_audio": {
            "description": "Specifying skip_audio removes the audio track.",
            "type": "boolean"
          },
          "skip_video": {
            "description": "Specifying skip_video removes the video track.",
            "type": "boolean"
          },
          "start_time": {
            "description": "Clipping API option 3. Universal epoch time, in seconds, to mark the beginning of the clip. Note: Clipping API only requires one of the three options for specifying duration or time.",
            "type": "integer"
          },
          "stream_end_time": {
            "description": "Clipping API option 2. An offset, in seconds, from the start of the live stream to mark the end of the clip. Note: Clipping API only requires one of the three options for specifying duration or time.",
            "type": "integer"
          },
          "stream_start_time": {
            "description": "Clipping API option 2. An offset, in seconds, from the start of the live stream to mark the beginning of the clip. Note: Clipping API only requires one of the three options for specifying duration or time.",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "streams": {
            "description": "When creating a playlist, the streams field is used to define which output renditions (by label) should be included in the manifest. Example format [{&quot;source&quot;: &quot;1080p&quot;}, {&quot;source&quot;: &quot;720p&quot;}].",
            "type": "object"
          },
          "type": {
            "description": "The only type supported is a playlist. This is used for generating multiple master playlists with different renditions in the HLS manifest with the defined stream labels.",
            "enum": [
              "playlist"
            ],
            "type": "string"
          },
          "url": {
            "description": "For VOD, URL is mandatory and sets the destination of the final asset destination. For access restricted origins, the credentials a can be passed along with the URL or stored within the Brightcove system. For Live, this is reserved for future use.",
            "type": "string"
          },
          "video_bitrate": {
            "description": "target video bitrate in kbps",
            "maximum": 10000,
            "minimum": 64,
            "type": "integer"
          },
          "video_codec": {
            "description": "The output video codec. Note: Only `h264` is supported.",
            "enum": [
              "h264"
            ],
            "type": "string"
          },
          "videocloud": {
            "$ref": "#/components/schemas/CreateVodClipbody.outputs.videocloud",
            "description": "Video Cloud customer have the option to push their clips directly through Dynamic Ingest. Options &quot;{&quot;video&quot;: {&quot;name&quot;}, &quot;ingest&quot;: { }&quot;. The video object will be sent to the CMS API and can include (description, tags, etc.). Note: the account_id and reference_id will be added automatically. If overriding the reference_id, ensure that the id does not already exist or the job will fail. For more information see: CMS-API-CreateVideo. The ingest object will be sent to the Dynamic Ingest API and can include (master, profile, poster, callbacks, etc). Note: the account_id and video_id are added automatically. For more information see: DI-API-IngestVideo."
          },
          "width": {
            "default": 640,
            "description": "Video frame width. If no width is supplied, we will use 640 pixels.",
            "type": "integer"
          }
        },
        "required": [
          "label",
          "live_stream",
          "keyframe_interval",
          "video_bitrate",
          "segment_seconds"
        ],
        "title": "Create_Live_Job_Request_Body.outputs",
        "type": "object"
      },
      "CreateVodClipbody": {
        "properties": {
          "live_job_id": {
            "description": "The id of Live Stream job to create the VOD clip from.",
            "type": "string"
          },
          "outputs": {
            "description": "Array of VOD outputs",
            "items": {
              "$ref": "#/components/schemas/CreateVodClipbody.outputs"
            },
            "type": "array"
          }
        },
        "required": [
          "live_job_id",
          "outputs"
        ],
        "title": "Create_VOD_ClipBody",
        "type": "object"
      },
      "CreateVodClipbody-Alternate": {
        "properties": {
          "outputs": {
            "description": "Array of VOD outputs",
            "items": {
              "$ref": "#/components/schemas/CreateVodClipbody.outputs"
            },
            "type": "array"
          }
        },
        "required": [
          "outputs"
        ],
        "title": "Create_VOD_ClipBody",
        "type": "object"
      },
      "CreateVodClipbody.outputs": {
        "properties": {
          "credentials": {
            "description": "The name of the credentials configured in your account for this address - A credential label for a valid client id + client secret should have been created when your Live account was set up, the credential label sent to you. If you do not have it, please Contact Brightcove Support",
            "type": "string"
          },
          "duration": {
            "description": "Duration of the clip in seconds",
            "type": "number"
          },
          "end_time": {
            "description": "End time for the clip in Epoch (Unix) time (seconds)",
            "type": "number"
          },
          "label": {
            "description": "Label for the output",
            "type": "string"
          },
          "start_time": {
            "description": "Start time for the clip in Epoch (Unix) time (seconds)",
            "type": "number"
          },
          "stream_end_time": {
            "description": "End time in seconds for the clip relative to the start time of the live stream",
            "type": "number"
          },
          "stream_end_timecode": {
            "description": "End for the clip as an SMPTE timecode for the live stream",
            "type": "number"
          },
          "stream_start_time": {
            "description": "Start time in seconds for the clip relative to the start time of the live stream",
            "type": "number"
          },
          "stream_start_timecode": {
            "description": "Start for the clip as an SMPTE timecode for the live stream",
            "type": "number"
          },
          "url": {
            "description": "URL for the clip",
            "type": "string"
          },
          "videocloud": {
            "$ref": "#/components/schemas/CreateVodClipbody.outputs.videocloud",
            "description": "An object containing inputs for Video Cloud ingestion"
          }
        },
        "required": [
          "label",
          "duration",
          "stream_start_time",
          "stream_end_time",
          "stream_start_timecode",
          "stream_end_timecode",
          "start_time",
          "end_time",
          "url",
          "credentials",
          "videocloud"
        ],
        "title": "Create_VOD_ClipBody.outputs",
        "type": "object"
      },
      "CreateVodClipbody.outputs.videocloud": {
        "properties": {
          "ingest": {
            "$ref": "#/components/schemas/CreateVodClipbody.outputs.videocloud.ingest",
            "description": "An object containing inputs for Video Cloud video ingestion - see the [Dynamic Ingest Reference](https://brightcovelearning.github.io/Brightcove-API-References/dynamic-ingest-api/v1/doc/swagger.html#operations-Ingest-AccountsVideosIngestRequestsByAccountIdAndVideoIdPost) - do not include the master field, as that information will be provided by the Live API"
          },
          "video": {
            "$ref": "#/components/schemas/CreateVodClipbody.outputs.videocloud.video",
            "description": "An object containing inputs for Video Cloud video object creation - see the [CMS API Reference](https://brightcovelearning.github.io/Brightcove-API-References/cms-api/v1/doc/swagger.html#operations-Videos-CreateVideo)"
          }
        },
        "required": [
          "video",
          "ingest"
        ],
        "title": "Create_VOD_ClipBody.outputs.videocloud",
        "type": "object"
      },
      "CreateVodClipbody.outputs.videocloud.ingest": {
        "properties": {
          "callbacks": {
            "description": "An array of URLs that nofications for the ingest job should be sent to",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "capture-images": {
            "description": "Whether Video Cloud should capture poster and thumbnail images at the midpoint of the clip",
            "example": true,
            "type": "boolean"
          },
          "profile": {
            "description": "The ingest profile to use - we recommend that you do **not** include this field and use the account default profile instead",
            "type": "string"
          }
        },
        "title": "Create_VOD_ClipBody.outputs.videocloud.ingest",
        "type": "object"
      },
      "CreateVodClipbody.outputs.videocloud.video": {
        "properties": {
          "cue_points": {
            "description": "Array of cuepoint objects",
            "items": {
              "$ref": "#/components/schemas/CreateVodClipbody.outputs.videocloud.video.cuePoint"
            },
            "type": "array"
          },
          "custom_fields": {
            "description": "An object whose properties are `fieldname`:`value` pairs - be sure to the *internal* name of the field",
            "type": "object"
          },
          "description": {
            "description": "Video short description",
            "type": "string"
          },
          "drm_disabled": {
            "description": "Use to disable DRM packaging for this video - applies only to DRM-enabled accounts",
            "type": "boolean"
          },
          "economics": {
            "$ref": "#/components/schemas/Economics",
            "description": "whether the video supports ads"
          },
          "geo": {
            "$ref": "#/components/schemas/CreateVodClipbody.outputs.videocloud.video.geo",
            "description": "map of geo-filtering properties"
          },
          "long_description": {
            "description": "A longer description of the video",
            "type": "string"
          },
          "name": {
            "description": "Title of the video clip",
            "type": "string"
          },
          "reference_id": {
            "description": "Reference id for the clip - must be unique within the account",
            "type": "string"
          },
          "schedule": {
            "$ref": "#/components/schemas/CreateVodClipbody.outputs.videocloud.video.schedule",
            "description": "map of scheduling properties"
          },
          "state": {
            "$ref": "#/components/schemas/State",
            "description": "Whether the video should be active or inactive",
            "example": "ACTIVE"
          },
          "tags": {
            "description": "Array of tags for the video - note that  tags are string that may not contain a comma",
            "type": "object"
          }
        },
        "required": [
          "name"
        ],
        "title": "Create_VOD_ClipBody.outputs.videocloud.video",
        "type": "object"
      },
      "CreateVodClipbody.outputs.videocloud.video.cuePoint": {
        "properties": {
          "force-stop": {
            "description": "whether video is force-stopped at the cue point",
            "type": "boolean"
          },
          "metadata": {
            "description": "optional metadata string (512 single-byte characters maximum)",
            "type": "string"
          },
          "name": {
            "description": "cue point name",
            "type": "string"
          },
          "time": {
            "description": "time of the cue point in seconds; example: 10.527",
            "type": "number"
          },
          "type": {
            "description": "cue point type",
            "enum": [
              "AD",
              "CODE"
            ],
            "example": "AD",
            "type": "string"
          }
        },
        "required": [
          "time",
          "type"
        ],
        "title": "Create_VOD_ClipBody.outputs.videocloud.video.cue_point",
        "type": "object"
      },
      "CreateVodClipbody.outputs.videocloud.video.geo": {
        "properties": {
          "countries": {
            "description": "array of ISO 3166 list of 2-letter codes(https://www.iso.org/obp/ui/#home) (search for &quot;country codes&quot;)",
            "type": "string"
          },
          "exclude_countries": {
            "description": "if true, country array is treated as a list of countries excluded from viewing",
            "type": "boolean"
          },
          "restricted": {
            "description": "whether geo-restriction is enabled for this video",
            "type": "boolean"
          }
        },
        "required": [
          "countries",
          "exclude_countries",
          "restricted"
        ],
        "title": "Create_VOD_ClipBody.outputs.videocloud.video.geo",
        "type": "object"
      },
      "CreateVodClipbody.outputs.videocloud.video.schedule": {
        "properties": {
          "ends_at": {
            "description": "end date-time of availability in ISO-8601(http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15) format",
            "type": "string"
          },
          "starts_at": {
            "description": "start date-time of availability in ISO-8601(http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15) format",
            "type": "string"
          }
        },
        "required": [
          "ends_at",
          "starts_at"
        ],
        "title": "Create_VOD_ClipBody.outputs.videocloud.video.schedule",
        "type": "object"
      },
      "Credentials": {
        "properties": {
          "credential_default_for_type": {
            "description": "The clip label (from the input)",
            "type": "boolean"
          },
          "credential_id": {
            "description": "The credential id",
            "type": "string"
          },
          "credential_private": {
            "description": "The private key for the credential (not shown; represented by asterisks)",
            "type": "string"
          },
          "credential_public": {
            "description": "The public key for the credential",
            "type": "string"
          },
          "label": {
            "description": "The label used to reference the credential in requests",
            "type": "string"
          },
          "type": {
            "description": "The credential type",
            "enum": [
              "ftp",
              "oauth",
              "s3",
              "videocloud",
              "zencoder"
            ],
            "type": "string"
          },
          "user_id": {
            "description": "The user id",
            "type": "string"
          }
        },
        "required": [
          "credential_default_for_type",
          "user_id",
          "credential_private",
          "type",
          "label",
          "credential_id",
          "credential_public"
        ],
        "title": "credentials",
        "type": "object"
      },
      "CuePoint": {
        "properties": {
          "accuracy": {
            "description": "The cuepoint insertion accuracy - may be segment or frame",
            "type": "string"
          },
          "duration": {
            "description": "The cuepoint duration in seconds",
            "type": "number"
          },
          "id": {
            "description": "The cuepoint id",
            "type": "string"
          },
          "inserted_at": {
            "description": "Time when the cue point was inserted in the stream",
            "type": "string"
          }
        },
        "required": [
          "id",
          "duration",
          "accuracy",
          "inserted_at"
        ],
        "title": "cue_point",
        "type": "object"
      },
      "DeactivateSepStream200": {
        "properties": {
          "id": {
            "description": "The job id for the stream that was Deactivated",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "Deactivate_SEP_Stream200",
        "type": "object"
      },
      "DeleteAdConfiguration200": {
        "properties": {
          "application_id": {
            "description": "The ad application id",
            "type": "string"
          },
          "deleted": {
            "description": "Confirmation of deletion",
            "type": "boolean"
          }
        },
        "required": [
          "application_id",
          "deleted"
        ],
        "title": "Delete_Ad_Configuration200",
        "type": "object"
      },
      "DeleteBeaconSet200": {
        "properties": {
          "beacon_set_id": {
            "description": "The beacon set id",
            "type": "string"
          },
          "deleted": {
            "description": "Whether the beacon set was deleted successfully",
            "type": "boolean"
          }
        },
        "required": [
          "beacon_set_id",
          "deleted"
        ],
        "title": "Delete_beacon_set200",
        "type": "object"
      },
      "DeleteSlateMediaSourceAsset200": {
        "properties": {
          "account_id": {
            "description": "Id for the account",
            "type": "string"
          },
          "media_source_asset_default": {
            "description": "Whether this is the default media source asset",
            "type": "boolean"
          },
          "media_source_asset_id": {
            "description": "Id for the slate asset",
            "type": "string"
          },
          "media_source_asset_status": {
            "description": "Current status of the ingestion of the media asset",
            "type": "string"
          },
          "media_source_asset_type": {
            "description": "The media asset type",
            "type": "string"
          },
          "media_source_asset_url": {
            "description": "URL for the media asset to be ingested",
            "type": "string"
          }
        },
        "required": [
          "media_source_asset_id",
          "account_id",
          "media_source_asset_default",
          "media_source_asset_type",
          "media_source_asset_url",
          "media_source_asset_status"
        ],
        "title": "Delete_Slate_Media_Source_Asset200",
        "type": "object"
      },
      "Economics": {
        "enum": [
          "AD_SUPPORTED",
          "FREE"
        ],
        "example": "AD_SUPPORTED",
        "title": "Economics",
        "type": "string",
        "x-enum-elements": [
          {
            "description": "Ad supported - this option can only be selected in the Brightcove account is ad-enabled",
            "name": "AD_SUPPORTED"
          },
          {
            "description": "No ad support",
            "name": "FREE"
          }
        ]
      },
      "GetSlateMediaSourceAssets200": {
        "properties": {
          "account_id": {
            "description": "Id for the account",
            "type": "string"
          },
          "media_source_asset_default": {
            "description": "Whether this is the default media source asset",
            "type": "boolean"
          },
          "media_source_asset_description": {
            "description": "User identifiable description for the slate",
            "type": "string"
          },
          "media_source_asset_id": {
            "description": "Id for the slate asset",
            "type": "string"
          },
          "media_source_asset_status": {
            "description": "Current status of the ingestion of the media asset",
            "type": "string"
          },
          "media_source_asset_type": {
            "description": "The media asset type",
            "type": "string"
          },
          "media_source_asset_url": {
            "description": "URL for the media asset to be ingested",
            "type": "string"
          }
        },
        "required": [
          "media_source_asset_id",
          "account_id",
          "media_source_asset_description",
          "media_source_asset_default",
          "media_source_asset_type",
          "media_source_asset_url",
          "media_source_asset_status"
        ],
        "title": "Get_Slate_Media_Source_Assets200",
        "type": "object"
      },
      "Id3Tag": {
        "properties": {
          "tag_name": {
            "description": "The ID3 tag name",
            "type": "string"
          },
          "tag_value": {
            "description": "The ID3 tag value",
            "type": "string"
          }
        },
        "required": [
          "tag_name",
          "tag_value"
        ],
        "title": "id3_tag",
        "type": "object"
      },
      "IngestSlateMediaSourceAssetResponse": {
        "properties": {
          "account_id": {
            "description": "Id for the account",
            "type": "string"
          },
          "media_source_asset_default": {
            "description": "Whether this is the default media source asset",
            "type": "boolean"
          },
          "media_source_asset_description": {
            "description": "User identifiable description for the slate",
            "type": "string"
          },
          "media_source_asset_id": {
            "description": "Id for the slate asset",
            "type": "string"
          },
          "media_source_asset_status": {
            "description": "Current status of the ingestion of the media asset",
            "type": "string"
          },
          "media_source_asset_type": {
            "description": "The media asset type",
            "type": "string"
          },
          "media_source_asset_url": {
            "description": "URL for the media asset to be ingested",
            "type": "string"
          }
        },
        "required": [
          "media_source_asset_id",
          "account_id",
          "media_source_asset_description",
          "media_source_asset_default",
          "media_source_asset_type",
          "media_source_asset_url",
          "media_source_asset_status"
        ],
        "title": "Ingest_Slate_Media_Source_Asset",
        "type": "object"
      },
      "IngestSlateMediaSourceAssetbody": {
        "properties": {
          "account_id": {
            "description": "The Live account id (if left blank, the request will still work)",
            "type": "string"
          },
          "source_description": {
            "description": "User identifiable description for the slate",
            "type": "string"
          },
          "source_url": {
            "description": "URL for the slate to ingest",
            "type": "string"
          }
        },
        "required": [
          "source_url",
          "account_id"
        ],
        "title": "Ingest_Slate_Media_Source_AssetBody",
        "type": "object"
      },
      "InsertId3TimedMetadataResponse": {
        "properties": {
          "id": {
            "description": "The job id",
            "type": "string"
          },
          "id3_tag": {
            "$ref": "#/components/schemas/Id3Tag"
          }
        },
        "required": [
          "id",
          "id3_tag"
        ],
        "title": "Insert_ID3_timed_metadata_Response",
        "type": "object"
      },
      "InsertId3TimedMetadatabody": {
        "properties": {
          "id3_tag": {
            "$ref": "#/components/schemas/InsertId3TimedMetadatabody.id3Tag",
            "description": "An object containing variables for the ID3 timed metadata"
          }
        },
        "required": [
          "id3_tag"
        ],
        "title": "Insert_ID3_timed_metadataBody",
        "type": "object"
      },
      "InsertId3TimedMetadatabody.id3Tag": {
        "description": "An object containing variables for the ID3 timed metadata",
        "properties": {
          "name": {
            "description": "A name for the tag",
            "type": "string"
          },
          "timecode": {
            "description": "Time to insert - by default, insertion is immediate - Note: 1) If you use the timecode property, the job only only stores the most recent request for insertion; 2) If you use the timecode property, the encoder must be sending SMPTE-formatted (HH:MM:SS:FF) timecode stored in the tc property via OnFI; 3) Software encoders such as Wirecast and OBS do not support the sending timecode via OnFI packets in the RTMP stream; 4) Elemental hardware encoders do support the sending timecode via OnFI packets in the RTMP stream",
            "type": "string"
          },
          "value": {
            "description": "A value for the tag (maximum string data size 256KB)",
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "title": "Insert_ID3_timed_metadataBody.id3_tag",
        "type": "object"
      },
      "Job": {
        "properties": {
          "ad_insertion": {
            "description": "Indicates whether SSAI is enabled",
            "type": "boolean"
          },
          "created_at": {
            "description": "ISO 8601 date-time string representing when the job was created",
            "type": "string"
          },
          "event_length": {
            "description": "Used to preset and define an end time for the live event. At any point within the specified event_length you may reconnect to your stream. The event_length setting goes into effect as soon as streaming begins.",
            "type": "number"
          },
          "finished_at": {
            "description": "ISO 8601 date-time string representing when the live stream was stopped",
            "type": "string"
          },
          "id": {
            "description": "The live job id",
            "type": "string"
          },
          "input_media_file": {
            "$ref": "#/components/schemas/Job.inputMediaFile",
            "description": "Object containing properties for the input media file"
          },
          "live_stream": {
            "description": "Indicates whether this is a live stream or VOD",
            "type": "boolean"
          },
          "output_media_files": {
            "description": "Array of objects containing properties for the output media files",
            "items": {
              "$ref": "#/components/schemas/Job.outputMediaFiles"
            },
            "type": "array"
          },
          "playback_url": {
            "description": "Playback URL for the live stream",
            "type": "string"
          },
          "playback_url_dvr": {
            "description": "Playback URL for the live DVR",
            "type": "string"
          },
          "reconnect_time": {
            "description": "The time, in seconds, that the system will wait for a stream to reconnect to the encoder",
            "example": 1800,
            "type": "number"
          },
          "region": {
            "description": "The Amazon AWS region to use for encoding the job",
            "enum": [
              "us-west-2",
              "us-east-1",
              "ap-southeast-2",
              "ap-northeast-1",
              "ap-southeast-1",
              "eu-central-1",
              "eu-west-1",
              "sa-east-1"
            ],
            "example": "us-west-2",
            "type": "string"
          },
          "slate": {
            "description": "id for a slate of assets included",
            "type": "string"
          },
          "state": {
            "description": "The current state of the job - possible values for Live jobs are standby, waiting, processing, disconnected. finishing, finished, cancelling, cancelled, failed; possible values for VOD jobs are waiting_finish_live, waiting, processing, creating_asset, cancelling, cancelled, finished, failed",
            "type": "string"
          },
          "stream": {
            "$ref": "#/components/schemas/Job.stream",
            "description": "Object containing properties for the live stream"
          },
          "submitted_at": {
            "description": "ISO 8601 date-time string representing when the job was submitted",
            "type": "string"
          },
          "updated_at": {
            "description": "ISO 8601 date-time string representing when the job was last modified",
            "type": "string"
          }
        },
        "required": [
          "region",
          "reconnect_time",
          "event_length",
          "live_stream",
          "ad_insertion",
          "input_media_file",
          "slate",
          "stream",
          "output_media_files"
        ],
        "title": "job",
        "type": "object"
      },
      "Job.inputMediaFile": {
        "properties": {
          "audio_bitrate_in_kbps": {
            "description": "Audio bitrate of the input media file",
            "type": "number"
          },
          "audio_codec": {
            "description": "Audio codec of the input media file",
            "type": "string"
          },
          "audio_sample_rate": {
            "description": "Audio sample rate of the input media file",
            "type": "number"
          },
          "audio_tracks": {
            "description": "The number of audio tracks",
            "type": "number"
          },
          "channels": {
            "description": "The number of audio channels",
            "type": "number"
          },
          "created_at": {
            "description": "ISO 8601 date-time string representing when the input file was created",
            "type": "string"
          },
          "duration_in_ms": {
            "description": "duration_in_ms.",
            "type": "number"
          },
          "error_class": {
            "description": "Type of error thrown",
            "type": "string"
          },
          "error_message": {
            "description": "Error message thrown",
            "type": "string"
          },
          "file_size_bytes": {
            "description": "File size",
            "type": "number"
          },
          "finished_at": {
            "description": "ISO 8601 date-time string representing when the input file was finished",
            "type": "string"
          },
          "format": {
            "description": "Format of the input file",
            "type": "string"
          },
          "frame_rate": {
            "description": "Frame rate of the input file",
            "type": "number"
          },
          "height": {
            "description": "Frame height of the input file",
            "type": "number"
          },
          "id": {
            "description": "System id of the input file",
            "type": "string"
          },
          "md5_checksum": {
            "description": "Checksum for the input file",
            "type": "string"
          },
          "state": {
            "description": "Current state of input file processing",
            "type": "string"
          },
          "total_bitrate_in_kbps": {
            "description": "Total bitrate of the input media file",
            "type": "number"
          },
          "updated_at": {
            "description": "ISO 8601 date-time string representing when the input file was last modified",
            "type": "string"
          },
          "url": {
            "description": "URL for the input media file",
            "type": "string"
          },
          "video_bitrate_in_kbps": {
            "description": "Video bitrate of the input media file",
            "type": "number"
          },
          "video_codec": {
            "description": "Video codec of the input media file",
            "type": "string"
          },
          "width": {
            "description": "Frame width of the input media file",
            "type": "number"
          }
        },
        "title": "job.input_media_file",
        "type": "object"
      },
      "Job.outputMediaFiles": {
        "properties": {
          "audio_bitrate_in_kbps": {
            "description": "Audio bitrate of the output media file",
            "type": "number"
          },
          "audio_codec": {
            "description": "Audio codec of the output media file",
            "type": "string"
          },
          "audio_sample_rate": {
            "description": "Audio sample rate of the output media file",
            "type": "number"
          },
          "audio_tracks": {
            "description": "The number of audio tracks",
            "type": "number"
          },
          "channels": {
            "description": "The number of audio channels",
            "type": "number"
          },
          "created_at": {
            "description": "ISO 8601 date-time string representing when the output file was created",
            "type": "string"
          },
          "duration_in_ms": {
            "description": "ISO 8601 date-time string representing when the output file was created",
            "type": "number"
          },
          "dvr_filename": {
            "description": "File name for the DVR playlist manifest",
            "type": "string"
          },
          "error_class": {
            "description": "Type of error thrown",
            "type": "string"
          },
          "error_message": {
            "description": "Error message thrown",
            "type": "string"
          },
          "file_size_bytes": {
            "description": "File size",
            "type": "number"
          },
          "filename": {
            "description": "File name for the playlist manifest",
            "type": "string"
          },
          "finished_at": {
            "description": "ISO 8601 date-time string representing when the output file was finished",
            "type": "string"
          },
          "format": {
            "description": "Format of the output file",
            "type": "string"
          },
          "frame_rate": {
            "description": "Frame rate of the output file",
            "type": "number"
          },
          "height": {
            "description": "Frame height of the output file",
            "type": "number"
          },
          "id": {
            "description": "System id of the output file",
            "type": "string"
          },
          "keyframe_interval": {
            "description": "Keyframe interval for the output media file",
            "format": "int32",
            "type": "integer"
          },
          "keyframe_interval_follow_source": {
            "description": "Whether keyframe rate for the output matches the source",
            "type": "boolean"
          },
          "live_stream": {
            "description": "Whether the output is a live stream",
            "type": "boolean"
          },
          "md5_checksum": {
            "description": "Checksum for the output file",
            "type": "string"
          },
          "playback_url": {
            "description": "URL for the output file",
            "type": "string"
          },
          "playback_url_dvr": {
            "description": "Live DVR url for live stream output",
            "type": "string"
          },
          "playback_url_vod": {
            "description": "URL for VOD output",
            "type": "string"
          },
          "playlist_type": {
            "description": "Playlist type for playlist output",
            "type": "string"
          },
          "state": {
            "description": "Current state of output file processing",
            "type": "string"
          },
          "total_bitrate_in_kbps": {
            "description": "Total bitrate of the output media file",
            "type": "number"
          },
          "type": {
            "description": "Will be playlist for playlist output",
            "type": "string"
          },
          "updated_at": {
            "description": "ISO 8601 date-time string representing when the output file was last modified",
            "type": "string"
          },
          "video_bitrate_in_kbps": {
            "description": "Video bitrate of the output media file",
            "type": "number"
          },
          "video_codec": {
            "description": "Video codec of the output media file",
            "type": "string"
          },
          "width": {
            "description": "Frame width of the output media file",
            "type": "number"
          }
        },
        "required": [
          "audio_bitrate_in_kbps",
          "audio_codec",
          "audio_sample_rate",
          "audio_tracks",
          "channels",
          "duration_in_ms",
          "file_size_bytes",
          "format",
          "frame_rate",
          "height",
          "video_bitrate_in_kbps",
          "video_codec",
          "width",
          "total_bitrate_in_kbps",
          "keyframe_interval",
          "keyframe_interval_follow_source",
          "live_stream",
          "type",
          "filename",
          "dvr_filename"
        ],
        "title": "job.output_media_files",
        "type": "object"
      },
      "Job.stream": {
        "properties": {
          "created_at": {
            "description": "ISO 8601 date-time string representing when the stream was created",
            "type": "string"
          },
          "destination": {
            "$ref": "#/components/schemas/Job.stream.destination"
          },
          "duration": {
            "description": "ISO Duration of the stream in seconds",
            "type": "number"
          },
          "finished_at": {
            "description": "ISO 8601 date-time string representing when the stream was finished",
            "type": "string"
          },
          "height": {
            "description": "Frame height of the stream",
            "type": "number"
          },
          "id": {
            "description": "System id of the stream",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/Job.stream.location"
          },
          "name": {
            "description": "Name of the stream",
            "type": "string"
          },
          "protocol": {
            "description": "Protocol of the stream",
            "type": "string"
          },
          "region": {
            "description": "AWS region list specified for the account",
            "type": "string"
          },
          "total_bitrate_in_kbps": {
            "description": "Total bitrate of the stream",
            "type": "number"
          },
          "updated_at": {
            "description": "ISO 8601 date-time string representing when the stream was last modified",
            "type": "string"
          },
          "url": {
            "description": "URL for the stream",
            "type": "string"
          },
          "video_bitrate_in_kbps": {
            "description": "Video bitrate of the input media file",
            "type": "number"
          },
          "video_codec": {
            "description": "Video codec of the input media file",
            "type": "string"
          },
          "width": {
            "description": "Frame width of the stream",
            "type": "number"
          }
        },
        "title": "job.stream",
        "type": "object"
      },
      "Job.stream.destination": {
        "properties": {
          "latitude": {
            "description": "Latitude of the location source",
            "type": "string"
          },
          "location": {
            "description": "Longitude of the location source",
            "type": "string"
          },
          "longitude": {
            "description": "Longitude of the location source",
            "type": "string"
          }
        },
        "title": "job.stream.destination",
        "type": "object",
        "description": "Object representing the destination of the stream"
      },
      "Job.stream.location": {
        "properties": {
          "latitude": {
            "description": "Latitude of the location source",
            "type": "string"
          },
          "location": {
            "description": "Longitude of the location source",
            "type": "string"
          },
          "longitude": {
            "description": "Longitude of the location source",
            "type": "string"
          }
        },
        "title": "job.stream.location",
        "type": "object",
        "description": "Object representing the location of the stream"
      },
      "ListCredentials": {
        "properties": {
          "Array": {
            "description": "of credentials objects",
            "items": {
              "$ref": "#/components/schemas/Credentials"
            },
            "type": "array"
          }
        },
        "required": [
          "Array"
        ],
        "title": "List_Credentials200",
        "type": "object"
      },
      "ListLiveJobs200": {
        "properties": {
          "jobs": {
            "description": "The filtered list of jobs.  List may be empty if no matching jobs or for last page.",
            "items": {
              "$ref": "#/components/schemas/Job"
            },
            "type": "array"
          },
          "next_token": {
            "description": "Use as start_token to fetch next page.  Not include if no more matching jobs.",
            "type": "string"
          },
          "start_token": {
            "description": "Returns start_token from current request (not included on first page).",
            "type": "string"
          }
        },
        "required": [
          "start_token",
          "jobs"
        ],
        "title": "List_Live_Jobs200",
        "type": "object"
      },
      "ListVodJobs": {
        "properties": {
          "next_token": {
            "description": "Use as start_token to fetch next page.  Not include if no more matching jobs.",
            "type": "string"
          },
          "start_token": {
            "description": "Returns start_token from current request (not included on first page).",
            "type": "string"
          },
          "vod_jobs": {
            "description": "The filtered list of jobs.  List may be empty if no matching jobs or for last page.",
            "items": {
              "$ref": "#/components/schemas/VodJobs2"
            },
            "type": "array"
          }
        },
        "required": [
          "start_token",
          "vod_jobs"
        ],
        "title": "List_Live_Jobs200",
        "type": "object"
      },
      "LiveJob": {
        "properties": {
          "ad_insertion": {
            "description": "Setting this parameter to true will enable server side ad insertion (SSAI) on the job. Current support includes, DFP, Freewheel, or any VAST 2.0/3.0 ad tags.",
            "type": "boolean"
          },
          "add_cdns": {
            "description": "Array of additional CDN providers to be used for manifest generation. For each CDN provided, the manifest will be prepended accordingly",
            "items": {
              "$ref": "#/components/schemas/AddCdns"
            },
            "type": "array"
          },
          "event_length": {
            "description": "Used to preset and define an end time for the live event. At any point within the specified `event_length` you may reconnect to your stream. The `event_length` setting goes into effect as soon as streaming begins.",
            "type": "integer"
          },
          "id": {
            "description": "Id for the stream.",
            "readOnly": true,
            "type": "string"
          },
          "live_stream": {
            "description": "Indicates that the job is a live streaming job.",
            "type": "boolean"
          },
          "max_hls_protocol_version": {
            "default": 3,
            "description": "Sets the maximum HLS protocol version to use. Special features will be used as available.",
            "type": "integer"
          },
          "notifications": {
            "description": "Array of notification destination objects or strings.  A notification will be sent to the destination when selected event occurs. You can use a simple string with a url: &quot;http://log:pass@httpbin.org/post&quot;, or you can use an object.",
            "items": {
              "oneOf": [
                {
                  "description": "URL that notifications should be sent to",
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/Notification"
                }
              ]
            },
            "type": "array"
          },
          "outputs": {
            "description": "Details on each output rendition of the Live job.",
            "items": {
              "$ref": "#/components/schemas/Outputs"
            },
            "type": "array"
          },
          "reconnect_time": {
            "description": "The time, in seconds, to wait for a stream to reconnect to the encoder. Default is set to 30 seconds.",
            "type": "integer"
          },
          "region": {
            "description": "You can specify an Amazon AWS region to use for encoding a job and we will process the job on servers in the region specified. It’s recommended to use the region closest to your encoder.",
            "type": "string"
          },
          "sep_state": {
            "description": "The current state of the job&#39;s SEP (static entry point) - possible values: &#39;waiting&#39; &#39;pending_activation&#39;, &#39;activation_in_progress&#39;, &#39;ready&#39;, &#39;pending_deactivation&#39;, &#39;deactivation_in_progress&#39;, &#39;cancelled&#39;, &#39;finished&#39;",
            "type": "string"
          },
          "slate": {
            "description": "id for slate of assets to be included",
            "type": "string"
          },
          "stream_name": {
            "description": "The stream name to add to your encoder configuration.",
            "readOnly": true,
            "type": "string"
          },
          "stream_url": {
            "description": "The stream URL to add to your encoder configuration.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "stream_url",
          "stream_name",
          "outputs",
          "live_stream",
          "ad_insertion",
          "region",
          "reconnect_time",
          "event_length",
          "max_hls_protocol_version",
          "slate",
          "sep_state",
          "notifications",
          "add_cdns"
        ],
        "title": "Create_a_Live_Job",
        "type": "object"
      },
      "ManualAdCuePointInsertion200": {
        "properties": {
          "cue_point": {
            "$ref": "#/components/schemas/CuePoint"
          },
          "id": {
            "description": "The id of the live stream job",
            "type": "string"
          }
        },
        "required": [
          "id",
          "cue_point"
        ],
        "title": "Manual_Ad_Cue_Point_Insertion200",
        "type": "object"
      },
      "ManualAdCuePointInsertionbody": {
        "properties": {
          "ad_server_data": {
            "description": "a set of any variables (key/value pairs) that should be passed to the adServer",
            "type": "object"
          },
          "duration": {
            "description": "An integer value to indicate the length of the ad break in seconds",
            "type": "number"
          },
          "timecode": {
            "description": "When to insert the cuepoint in HH:MM:SS:FF from the stream start (FF = frames); if omitted, the cuepoint will be inserted immediately",
            "type": "string"
          }
        },
        "required": [
          "duration",
          "timecode"
        ],
        "title": "Manual_Ad_Cue_Point_InsertionBody",
        "type": "object"
      },
      "Notification": {
        "properties": {
          "credentials": {
            "description": "Credentials for the destination, if required.",
            "type": "string"
          },
          "event": {
            "description": "Event type to send notifications for.  It’s recommended to set events on the job and not individual rendition outputs since renditions will finish simultaneously.",
            "type": "string"
          },
          "url": {
            "description": "Destination for the notification.",
            "type": "string"
          }
        },
        "required": [
          "url",
          "credentials",
          "event"
        ],
        "title": "notification",
        "type": "object"
      },
      "Outputs": {
        "properties": {
          "id": {
            "description": "The unique id for the rendition.",
            "type": "string"
          },
          "playback_url": {
            "description": "Media HLS manifest for the specified rendition (non-SSAI).",
            "type": "string"
          },
          "playback_url_dvr": {
            "description": "Media HLS manifest for the specified rendition (with DVR capability).",
            "type": "string"
          },
          "playback_url_vod": {
            "description": "Media HLS manifest for the VOD version of the stream if one was specified in the job settings - note that the VOD will not be available until the live event has finished and the creation of the VOD is complete.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "playback_url",
          "playback_url_dvr",
          "playback_url_vod"
        ],
        "title": "outputs",
        "type": "object"
      },
      "State": {
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ],
        "example": "ACTIVE",
        "title": "State",
        "type": "string",
        "x-enum-elements": [
          {
            "description": "Video is available for playback",
            "name": "ACTIVE"
          },
          {
            "description": "Video is not available for playback",
            "name": "INACTIVE"
          }
        ]
      },
      "UpdateAdConfigurationbody": {
        "properties": {
          "account_id": {
            "description": "Your Live account id (if you leave this blank, the request will still work)",
            "type": "string"
          },
          "ad_configuration_url_format": {
            "description": "Format for the ad tag - see SSAI Using the Brightcove Live API for the available ad configuration variables.",
            "type": "string"
          },
          "application_ad_configuration": {
            "$ref": "#/components/schemas/UpdateAdConfigurationbody.applicationAdConfiguration"
          },
          "application_description": {
            "description": "Human readable description of the ad application.",
            "type": "string"
          }
        },
        "required": [
          "application_ad_configuration",
          "ad_configuration_url_format",
          "application_description"
        ],
        "title": "Update_Ad_ConfigurationBody",
        "type": "object"
      },
      "UpdateAdConfigurationbody.applicationAdConfiguration": {
        "properties": {
          "ad_configuration_description": {
            "description": "Human readable description of the configuration.",
            "type": "string"
          },
          "ad_configuration_expected_response_type": {
            "description": "The expected response type based on your ad server",
            "type": "string"
          },
          "ad_configuration_headers": {
            "description": "An optional JSON object that can contain zero or more key-value-pairs, for which both key and value must be strings.  All of the standard URL substitutions are valid for headers.",
            "type": "object"
          },
          "ad_configuration_headers_for_impressions": {
            "description": "If true, this configuration will send headers on all ad requests and impressions; if false, headers will not be sent on impressions (quartiles/impressions that we fire for tracking from an ad response).",
            "type": "boolean"
          },
          "ad_configuration_strategy": {
            "description": "Specifies whether ad breaks should include single or muliple ads",
            "type": "string"
          },
          "ad_configuration_transforms": {
            "description": "Array of ad configuration transforms.",
            "items": {
              "$ref": "#/components/schemas/UpdateAdConfigurationbody.applicationAdConfiguration.adConfigurationTransforms"
            },
            "type": "array"
          }
        },
        "required": [
          "ad_configuration_description",
          "ad_configuration_expected_response_type",
          "ad_configuration_strategy",
          "ad_configuration_transforms"
        ],
        "title": "Update_Ad_ConfigurationBody.application_ad_configuration",
        "type": "object"
      },
      "UpdateAdConfigurationbody.applicationAdConfiguration.adConfigurationTransforms": {
        "properties": {
          "xpath": {
            "description": "xpath for the transform.",
            "type": "string"
          },
          "xslt": {
            "description": "xslt stylesheet for the transform.",
            "type": "string"
          }
        },
        "required": [
          "xpath",
          "xslt"
        ],
        "title": "Update_Ad_ConfigurationBody.application_ad_configuration.ad_configuration_transforms",
        "type": "object"
      },
      "UpdateBeaconSetbody": {
        "properties": {
          "account_id": {
            "description": "URL for the slate to ingest",
            "type": "string"
          },
          "beacon_urls": {
            "description": "Array of beacon URLs",
            "items": {
              "$ref": "#/components/schemas/UpdateBeaconSetbody.beaconUrls"
            },
            "type": "array"
          }
        },
        "required": [
          "beacon_urls"
        ],
        "title": "Update_beacon_setBody",
        "type": "object"
      },
      "UpdateBeaconSetbody.beaconUrls": {
        "properties": {
          "beacon_type": {
            "description": "the beacon type - see ( https://support.brightcove.com/node/17763#Beacons) for the valid beacon types",
            "type": "string"
          },
          "beacon_url": {
            "description": "URL format for the beacon - see ( https://support.brightcove.com/node/17763#Beacons) for the valid beacon variables",
            "type": "string"
          }
        },
        "required": [
          "beacon_url",
          "beacon_type"
        ],
        "title": "Update_beacon_setBody.beacon_urls",
        "type": "object"
      },
      "UpdateCredential": {
        "properties": {
          "credential_id": {
            "description": "The credential id",
            "type": "string"
          },
          "user_id": {
            "description": "The user id",
            "type": "string"
          }
        },
        "required": [
          "credential_id",
          "user_id"
        ],
        "title": "Update_Credential200",
        "type": "object"
      },
      "UpdateCredentialbody": {
        "properties": {
          "credential_default_for_type": {
            "description": "Whether these are the default credentials for the request type",
            "type": "boolean"
          },
          "credential_label": {
            "description": "Label for the credential",
            "type": "string"
          },
          "credential_private": {
            "description": "Private key or password depending on the type",
            "type": "string"
          },
          "credential_public": {
            "description": "Public key or password depending on the type",
            "type": "string"
          },
          "credential_type": {
            "description": "The credential type",
            "enum": [
              "ftp",
              "oauth",
              "s3",
              "videocloud",
              "zencoder"
            ],
            "type": "string"
          },
          "oauth_settings": {
            "$ref": "#/components/schemas/UpdateCredentialbody.oauthSettings"
          },
          "user_id": {
            "description": "GUID for which the credentials are being created.",
            "type": "string"
          }
        },
        "required": [
          "user_id",
          "credential_default_for_type",
          "credential_label",
          "credential_type",
          "credential_private",
          "credential_public"
        ],
        "title": "Update_CredentialBody",
        "type": "object"
      },
      "UpdateCredentialbody.oauthSettings": {
        "title": "Update_CredentialBody.oauth_settings",
        "type": "object",
        "description": "OAuth settings for OAuth credentials needed to send notifications to a notification URL Required for oauth type credentials",
        "properties": {
          "url": {
            "description": "OAuth access token URL for OAuth credentials needed to send notifications to a notification URL",
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "VodJobs": {
        "properties": {
          "jvod_id": {
            "description": "The clip job id",
            "type": "string"
          },
          "label": {
            "description": "The clip label (from the input)",
            "type": "string"
          }
        },
        "required": [
          "jvod_id",
          "label"
        ],
        "title": "vod_jobs",
        "type": "object"
      },
      "VodJobs2": {
        "properties": {
          "job_id": {
            "description": "The parent job id",
            "type": "string"
          },
          "jvod_created_at": {
            "description": "Time vod job was created (UNIX time in milliseconds)",
            "type": "integer"
          },
          "jvod_duration_s": {
            "description": "Length of VOD clip requested (seconds)",
            "type": "integer"
          },
          "jvod_finished_at": {
            "description": "Time vod job completed processing (UNIX time in milliseconds)",
            "type": "integer"
          },
          "jvod_id": {
            "description": "The clip job id",
            "type": "string"
          },
          "jvod_last_state_change_at": {
            "description": "Time vod job was last modified (UNIX time in milliseconds)",
            "type": "integer"
          },
          "jvod_region": {
            "description": "Region VOD job is processed in",
            "enum": [
              "us-west-2",
              "us-east-1",
              "ap-southeast-2",
              "ap-northeast-1",
              "ap-southeast-1",
              "eu-central-1",
              "eu-west-1",
              "sa-east-1"
            ],
            "type": "string"
          },
          "jvod_reported_duration_s": {
            "description": "Length of VOD clip as generated (seconds)",
            "type": "integer"
          },
          "jvod_state": {
            "description": "Current vod job processing state",
            "enum": [
              "error",
              "waiting",
              "waiting_finish_live",
              "processing",
              "cancelling",
              "cancelled",
              "finished",
              "failed",
              "creating_asset"
            ],
            "type": "string"
          },
          "jvod_type": {
            "description": "VOD job type",
            "enum": [
              "s3",
              "ftp",
              "instant",
              "error"
            ],
            "type": "string"
          },
          "jvod_url": {
            "description": "VOD job destination (e.g. s3://somebucket or ftp://someserver)",
            "type": "string"
          },
          "label": {
            "description": "The clip label (from the input)",
            "type": "string"
          },
          "user_id": {
            "description": "ID of creating user",
            "type": "string"
          }
        },
        "required": [
          "jvod_id",
          "label"
        ],
        "title": "vod_jobs2",
        "type": "object"
      }
    },
    "parameters": {
      "VideoCloudAccountId": {
        "name": "account_id",
        "in": "path",
        "description": "Video Cloud account ID.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "ContentType": {
        "name": "Content-Type",
        "in": "header",
        "description": "Content-Type: application/json",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "default": "application/json"
        },
        "example": "application/json"
      },
      "XAPIKEY": {
        "name": "X-API-KEY",
        "in": "header",
        "description": "X-API-KEY: {APIKey}",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        },
        "example": "6aaXAZSSzRatgbVo7P12v7g13ovsuemr3y0C"
      },
      "LiveAccountId": {
        "name": "account_id",
        "in": "path",
        "description": "Live account ID",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "JobId": {
        "name": "job_id",
        "in": "path",
        "description": "Live job ID",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "CredentialId": {
        "name": "credential_id",
        "in": "path",
        "description": "A credential ID",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "SlateMsaId": {
        "name": "slate_msa_id",
        "in": "path",
        "description": "A slate media asset ID",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "BeaconSetId": {
        "name": "beacon_set_id",
        "in": "path",
        "description": "A slate media asset ID",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      }
    }
  }
}
