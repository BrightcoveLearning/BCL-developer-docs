openapi: '3.0.0'
x-bc-implicit-head: true
x-bc-implicit-options: true
x-bc-upstream: 'http://backend_server'
info:
  description: API for Zencoder
  version: 2.0.0
  title: Zencoder API
  x-bc-access: public
servers:
  - url: 'https://app.zencoder.com/api/v2'
    variables: {}
tags:
  - name: Jobs
    description: Operations for managing Zencoder encoding jobs.
  - name: Inputs
    description: Operations for getting input details and progress.
  - name: Outputs
    description: Operations for getting output details and progress.
  - name: Accounts
    description: Operations for managing accounts.
  - name: Reports
    description: Operations for getting reports.
paths:
  '/jobs':
    post:
      tags:
        - Jobs
      summary: List the current status for every video on the account
      description: >-
        'Encoding jobs are created by sending an HTTP POST request to https://app.zencoder.com/api/v2/jobs. The post body must include two things: the URL of a video to process and your API key. It may also include output settings for the job, including an output destination, notification settings, and transcoding settings.'
      operationId: createJob
      security: []
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/ZencoderApiKey'
      requestBody:
        description: >-
          Defines inputs and outputs for a Zencoder encoding job.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobBody'
        required: true
      responses:
        '200':
          description: A list of videos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateJobResponse'
        '403':
          description: Forbidden
        '422':
          description: Invalid query parameters
        '500':
          description: Server error
      deprecated: false
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
components:
  parameters:
    ContentType:
      name: Content-Type
      in: header
      description: 'Content-Type: application/json'
      required: true
      style: simple
      explode: false
      schema:
        type: string
    ZencoderApiKey:
      name: Zencoder-Api-Key
      in: header
      description: Your API key
      required: true
      schema:
        type: string
  schemas:
    CreateJobBody:
      title: Create Encoding Job Body
      type: object
      description: >-
        Request body properties for a create job request
      required:
        - input
      properties:
        api_key:
          type: string
          description: >-
            'API key for your Zencoder account (must be included here if not passed as a header, which is the recommended way) - get your API key from [https://app.zencoder.com/api](https://app.zencoder.com/api)'
        dynamic_profile_options:
          $ref: '#/components/schemas/DynamicProfileOptions'
        generate_dynamic_profile:
          type: boolean
          description: >-
            'With CAE the number of outputs and parameters of such outputs may change dynamically for each input file. To specify limits on the number of outputs to be generated as well as other profile constraints, CAE job request must also include dynamic_profile_options object. The outputs reserved for CAE use should not include resolution, bitrate, or codec-related parameters. Instead, they should include labels dynamic_profile_rendition. The number of outputs reserved for CAE use must match the number specified as max_renditions in dynamic_profile_options.'
        input:
          type: string
          description: >-
            'A valid URL to a media file (HTTP/HTTPS, FTP/FTPS, SFTP, Azure, GCS, CF or S3), with or without authentication'
        region:
          type: string
          description: >-
            'The AWS region or Google Compute Engine instance (beta) where Zencoder should process the job'
          enum:
            - us
            - europe
            - asia
            - sa
            - australia
            - us-virginia
            - us-oregon
            - us-n-california
            - eu-dublin
            - asia-singapore
            - asia-tokyo
            - sa-saopaulo
            - australia-sydney
          default: us
        test:
          type: boolean
          description: >-
            'Enable test mode ("Integration Mode") for a job'
          default: false
        private:
          type: boolean
          description: 'Enable privacy mode for a job'
          default: false
        pass_through:
          type: string
          description: Optional information to store alongside this job
        mock:
          type: boolean
          description: Send a mocked job request
          default: false
        grouping:
          type: string
          description: A report grouping for this job
        aspera_transfer_policy:
          type: string
          description: >-
            How to allocate available bandwidth for Aspera file transfers
          enum:
            - fair
            - low
          default: fair
        transfer_minimum_rate:
          type: integer
          description: A targeted rate in Kbps for data transfer minimums
          default: 1800
        transfer_maximum_rate:
          type: integer
          description: A targeted rate in Kbps for data transfer maximums
          default: 250000
        expected_md5_checksum:
          type: string
          description: The expected MD5 checksum of the input file. If the file's checksum does not match the provided checksum the job will fail.
        credentials:
          type: string
          description: References saved credentials by a nickname
        notifications:
          description: >-
            Array of notification destination objects or strings - notifications defined here are for job-level events.  A notification will be sent to the destination when selected event occurs. You can use a simple string with a url: &quot;http://log:pass@httpbin.org/post&quot;, or you can use an object.  <br> Retry strategy: In the event of a failed request to send a notification, the default retry strategy is to retry 50 times with an exponential delay between attempts: <br>
            `max_retry_times = 50` <br> `delay_delta_s = 5` <br>
            `next_retry = now_s + retry_count * delay_delta_s`
          items:
            oneOf:
              - $ref: '#/components/schemas/Notification'
              - type: string
                description: A URL or email address to send notifications to
          type: array
        outputs:
          type: array
          description: Array of output specifications
          items:
            $ref: '#/components/schemas/Output'
    DynamicProfileOptions:
      title: Dynamic Profile Options
      type: object
      description: >-
         'hash of options for CAE (Context Aware Encoding) jobs. With CAE the number of outputs and parameters of such outputs may change dynamically for each input file. The dynamic_profile_options settings define the way renditions should be created. See [CAE Settings](https://support.brightcove.com/zencoder-cae-settings) for details. You must also set generate_dynamic_profile equal to true to use this feature.'
      properties:
        min_renditions:
          type: integer
          description: The minium number of renditions to generate.
          minimum: 1
          maximum: 15
          default: 1
        max_renditions:
          type: integer
          description: The maximum number of renditions to generate.
          minimum: 1
          maximum: 15
          default: 8
        min_resolution:
          type: object
          description: Minimum resolution to be considered for the ladder.
          properties:
            height:
              type: integer
              minimum: 16
              maximum: 8192
              default: 108
            width:
              type: integer
              minimum: 16
              maximum: 8192
              default: 192
        max_resolution:
          type: object
          description: Maximum resolution to be considered for the ladder.
          properties:
            height:
              type: integer
              minimum: 16
              maximum: 8192
              default: (sourse height)
            width:
              type: integer
              minimum: 16
              maximum: 8192
              default: (source width)
        max_frame_rate:
          type: number
          description: Maximum frame rate that can be used.
          minimum: 0.1
          maximum: 120
          default: 30
        keyframe_rate:
          type: number
          description: Keyframe rate. This value can be either 0.5 or 1. For SSAI enabled content, this value needs to be 1.
          minimum: 0.5
          maximum: 1.0
          default: 0.5
        fixed_frame_rate:
          type: boolean
          description: Instructs generator to use same frame rate across all renditions. If false, H.264 baseline profile renditions at resolutions below 360p will be assigned halved frame rate.
          default: true
        max_bitrate:
          type: integer
          description: Maximum bitrate [kbps] that can be used.
          minimum: 400
          maximum: 40000
          default: 15000
        min_bitrate:
          type: integer
          description: Minimum bitrate [kbps] that can be used.
          minimum: 40
          maximum: 400
          default: 200
        max_first_rendition_bitrate:
          type: integer
          description: Maximum bitrate [kbps] that can be used for first rendition.
          minimum: 40
          maximum: 1000
          default: 700
        min_granularity:
          type: integer
          description: Minimum relative change in bitrate between renditions as a percentage.
          minimum: 1
          maximum: 100
          default: 90
        max_granularity:
          type: integer
          description: Maximum relative change in bitrate between renditions as a percentage.
          minimum: 1
          maximum: 100
          default: 30
        video_codec:
          type: string
          description: Video codec to use.
          enum:
            - h264
            - hevc
          default: h264
        bitrate_cap_to_bitrate_ratio:
          type: number
          description: Ratio of maximum bit rate to average bitrate to be used for VBR encoding.
          minimum: 1.0
          maximum: 2.0
          default: 1.3
        buffer_size_to_bitrate_ratio:
          type: number
          description: Ratio of decoder buffer size to average bitrate to be used for VBR encoding.
          minimum: 1.0
          maximum: 4.0
          default: 2.0
        bitrate_cap_offset:
          type: integer
          description: Constant added when computing maximum bitrate (KBPS).
          default: 64
        buffer_size_offset:
          type: integer
          description: Constant added when computing VBV buffer size.
          default: 85
        quality_rate_tune:
          type: integer
          description: Quality vs rate tuning parameter.
          minimum: -20
          maximum: 20
          default: 0
        video_configurations:
          type: array
          description: >-
            'An array of structures describing resolutions, frame rates and associated codec settings that should be preferentially or mandatorily generated as part of the CAE encoding. See the [CAE encoding guide](https://support.brightcove.com/zencoder-cae-settings#video_configurations) for details.'
          items:
            type: object
    Notification:
      properties:
        url:
          description: A valid HTTP or HTTPS URL to notify, optionally including HTTP Auth credential
          type: string
        format:
          type: string
          description: A format and content type for notifications
          enum:
            - json
            - xml
        headers:
          type: object
          description: >-
            By default, HTTP notifications are sent with an HTTP Content-Type, along with a User-Agent; if your application requires additional headers, they can be specified here
      title: notification
      type: object
    Output:
      title: Output Object
      type: object
      properties:
        type:
          type: string
          description: The type of file to output
          enum:
            - standard
            - segmented
            - playlist
            - transfer-only
          default: standard
        label:
          type: string
          description: An optional label for this output - must be unique for the job
        dynamic_profile_rendition:
          type: integer
          description: >-
            'The `dynamic_profile_rendition` setting specifies that this Output should use settings from the dynamically generated CAE profile, and specifically which rendition of the profile to use settings from. When `dynamic_profile_rendition` is set, there is no need to specify encoding settings such as resolution, bitrate, etc. (See the [CAE Guide](https://support.brightcove.com/zencoder-cae-guide) for the full list of settings that are automatically set by CAE.)'
        url:
          type: string
          description: A S3, Cloud Files, GCS, FTP, FTPS, SFTP, Aspera, Azure or HTTP URL where Zencoder will put the transcoded file
        secondary_url:
          type: string
          description: A S3, Cloud Files, GCS, FTP, FTPS, SFTP, Aspera, Azure or HTTP URL where Zencoder will put the transcoded file
        base_url:
          type: string
          description: A base S3, Cloud Files, GCS, FTP, FTPS, SFTP, Azure, or Aspera directory URL where Zencoder put the transcoded file, without a filename
        filename:
          type: string
          description: The filename of a finished file
        package_filename:
          type: string
          description: The filename of a packaged output
        package_format:
          type: string
          description: Zip/packaging format to use for the output file(s)
          enum:
            - zip
            - tar
        device_profile:
          type: string
          description: >-
            'A device profile to use for mobile device compatibility. See the [encoding guide](https://support.brightcove.com/zencoder-encoding-settings-general-output-settings#device_profile) for the details of the different profiles.'
          enum:
            - mobile/advanced
            - mobile/baseline
            - v1/mobile/advanced
            - v1/mobile/baseline
            - v1/mobile/legacy
            - v2/mobile/advanced
            - v2/mobile/baseline
            - v2/mobile/legacy
        strict:
          type: boolean
          description: >-
            Enable strict mode. By default, we will try to correct encoding problems for you. This is called "compatible" mode. For example, if you set a video bitrate that is too low for our encoder, we will automatically correct and use the lowest possible bitrate. So if you ask for a bitrate of 150kbps, but the encoder can't do anything lower than 200kbps, we will automatically encode the video at 200kbps for you.

            If you enable "strict" mode, we will not correct encoding settings like these. Instead, we will fail the job, because we cannot meet your target spec.
          default: false
        master_display:
          $ref: '#/components/schemas/MasterDisplay'
        max_content_light_level:
          type: number
          description: >-
            Maximum light level for the content as a whole nits or candelas per square meter (cd/m2) - integer values (for HDR10 outputs)
          minimum: 0
          maximum: 10000.0
        max_frame_average_light_level:
          type: number
          description: >-
            Maximum average light level for content frames nits or candelas per square meter (cd/m2) - integer values. Although values up to 10000 are allowed, values in the 100-200 range will generally produce the best results (for HDR10 outputs)
          minimum: 5.0
          maximum: 10000.0
        skip_audio:
          type: boolean
          description: Do not output a audio track
          default: false
        skip_video:
          type: boolean
          description: Do not output a video track
          default: false
        source:
          type: string
          description: >-
             References a label on another job and uses the video created by that output for processing instead of the input file.

             Using source in conjunction with a type of "transfer-only" allows transferring a single output video to a second url. Useful for sending a single video to multiple destinations.
        credentials:
          type: string
          description: References saved credentials by a nickname
        generate_md5_checksum:
          type: boolean
          description: Generate an MD5 checksum of the output file
          default: false
        parallel_upload_limit:
          type: integer
          description: >-
            The maximum number of simultaneous uploads to attempt - defaults: `30` for S3, `10` for other destinations
        format:
          type: string
          description: >-
            'The output container format to use. By default, determined by the output filename and then video or audio codec. Otherwise: mp4 (for standard outputs); ts (for segmented outputs). See [formats and codecs](https://support.brightcove.com/zencoder-encoding-settings-format-and-codecs#format) for more information and notes on compatibility.'
          enum:
            - 3gp
            - aac
            - ac3
            - ec3
            - flv
            - m4f
            - mj2
            - mkv
            - mp3
            - mp4
            - mxf
            - ogg
            - ts
            - webm
            - wmv
        video_codec:
          type: string
          description: >-
            'The output video codec to use. Zencoder currently supports the following codecs: h264 (default), hevc, jp2, theora, vp6, vp8, vp9, mpeg4, and wmv. By default, determined by the format, profile, or audio_codec. h264 if none are provided. See [formats and codecs](https://support.brightcove.com/zencoder-encoding-settings-format-and-codecs#video_codec) for notes on compatibility.'
          enum:
            - h264
            - hevc
            - jp2
            - mpeg4
            - theora
            - vp6
            - vp8
            - vp9
            - wmv
        audio_codec:
          type: string
          description: >-
            'The output audio codec to use. Zencoder currently supports the following codecs: h264 (default), hevc, jp2, theora, vp6, vp8, vp9, mpeg4, and wmv. By default, determined by the format, profile, or audio_codec. h264 if none are provided. See [formats and codecs](https://support.brightcove.com/zencoder-encoding-settings-format-and-codecs#audio_codec) for notes on compatibility.'
          enum:
            - aac
            - ac3
            - amr
            - eac3
            - mp3
            - pcm
            - vorbis
            - wma
        size:
          type: string
          description: >-
            The resolution of the output file, expressed as WxH, like 640×480 or 1280×720. Note that width and height take precedence over size.

            Aspect mode will be preserved by default, so if the input video is 16:9 and a 4:3 output resolution is requested, the output will maintain the 16:9 aspect ratio. This will result in the output dimensions not matching the requested size. Use aspect_mode to control this.
          example: 640x360
        width:
          type: integer
          description: >-
            Video frame width. If no width is supplied, we will use the original width, or scale to size or height setting. **Values must be divisible by 4.** Note that width and height take precedence over size.
        height:
          type: integer
          description: >-
            Video frame height. If no height is supplied, we will use the original width, or scale to size or width setting. **Values must be divisible by 4.** Note that width and height take precedence over size.
        upscale:
          type: boolean
          description: >-
            By default, Zencoder will not increase the size of (or “upscale”) an input video to match the width and height you specify in an API request. Generally, upscaling a video just increases the size, but doesn’t really increase the quality. Your playback device (Flash, HTML5 Video, iPhone, etc.) can increase the size of a video rather than having the encoder do it.

            But if you do want to force Zencoder to increase the size of an input video, set “upscale” to true. If you do, an input video that is smaller than the output resolution will expand to fit the resolution. For example, if your output spec is 480×360, and someone submits a video that is 320×240, the video will be upsized to 480×360 if you set this option to true, and will remain at 320×240 otherwise.
          default: false
        aspect_mode:
          type: string
          description: >-
            If the aspect ratio of the input does not match the requested output aspect ratio, what should the output resolution be? “aspect_mode” controls this decision. Note that **both the width and height may be modified.**

            As an example, assume that an input file is 1280×720 (widescreen 16:9), but the target output is 640×480 (standard 4:3). There are four basic approaches to this problem, and Zencoder supports them all.

            **preserve**: By default, Zencoder will preserve the aspect ratio of the original file, so if you submit widescreen content and ask for standard resolution, the output file will fit keep the widescreen aspect ratio, and will fit within the output size. Presumably, the player will then add black bars to fill up the frame. In our example, the output file will be 640×360 (widescreen 16×9 that fits within the 640×480 target).

            **stretch**: When the aspect mode is “stretch”, the output video will exactly match the requested width and height, even if it distorts the image. So in our example, the output will be 640×480, but will look vertically stretched. NB: this is not the same as the “upscale” option, above, which governs whether or not a smaller video will be enlarged to a larger frame size.

            **crop**: This option tells Zencoder to “zoom in” to the video to match the output size, by cropping pixels from the top/bottom or left/right. So if the input is widescreen 1280×720, and the output target is standard 640×480, we will crop roughly 160 pixels from the left and from the right of the input file (creating a 4:3 movie), and then resize that down to 640×480. If you’re old enough to remember non-widescreen VHS (like us), this is the old “pan and scan” option.

            **pad**: The pad option tells Zencoder to letterbox the video to match the output frame size exactly. Use this option if your target player doesn’t know how to pad a video; otherwise, you’re just wasting bits by including black bars in the actual file. Following our example, this option would take 1280×720 (16:9) content and convert it to 640×480 (4:3) by creating a 640×360 movie, and then placing 60 pixel black bars at the top and bottom of the movie. So the movie would be 640×480, with black bars at the top and bottom.

            Note that aspect_mode requires that both a width and a height are provided (or size); otherwise, if only one dimension is provided, we will calculate the other dimension proportionately.

            Note: the VP6 video_codec does not support the "pad" aspect_mode. If you ask for "pad" with VP6 video, we will use the default mode of "preserve".
          enum:
            - preserve
            - stretch
            - crop
            - pad
          default: preserve
        sample_aspect_ratio:
          type: string
          description: >-
            The sample (pixel) aspect ratio to be used for the output video. The size, width, height, and aspect_mode mode options all refer to the encoded pixel dimensions, not the display dimensions.

            Sets the aspect ratio to use for sample/pixels of the output video, specified as "8:9", "32:27", or any other ratio of two positive integers, each between 1 and 65535.

            Specifying any (valid) value for this setting changes the default 'aspect_mode' from 'preserve' to 'stretch', which means that by default you'll also need to specify a width/height for the encoded output.

            Note: It may be useful to use the 'upscale' option in conjunction with this option for predictable output resolutions.

            This option only applies when using the H.264 and HEVC codecs.
          example: '8:9'
        force_interlace_headers:
          type: boolean
          description: >-
            Some decoders ask for interlaced content, but will play progressive content just fine. This setting will add "interlaced" headers to the metadata of progressive content, to make it look like it is actually interlaced.

            Note: Some media inspection tools won't be tricked by this, and will report this content as progressive despite the header information.)

            This option only applies when using the H.264 codec.
          default: false
        quality:
          type: integer
          description: >-
            'The desired output video quality, from 1 to 5. Automatically selects a video_bitrate to achieve this quality.

            This automatically chooses a video bitrate that produces a video of the desired quality. This is useful, because one video may need a higher bitrate than another to achieve a target visual quality, due to the complexity of the content, the resolution, etc.

            Higher quality means higher bitrate and vice versa.

            Quality 1: Highly compressed. Mediocre visual quality, but small files.
            Quality 2: Acceptable quality.
            Quality 3: Good quality. Better than most web video.
            Quality 4: Great quality. Looks excellent.
            Quality 5: Nearly lossless. Large files. Not recommended unless you plan to encode this output again.

            As a rule of thumb, lowering quality by a level will reduce file size by about 40%. Higher quality encoding is also a bit slower than lower quality encoding.

            Remember that the output bitrate will vary from file to file when using the quality setting, depending on the type of video. Even at the same Quality setting, low-complexity video (like a screencast) will generally result in lower bitrates than high-complexity video (like a movie).'
          default: 3
        video_bitrate:
          type: integer
          description: >-
            The desired output bitrate for a video, expressed in kbps. This results in a predictable output bitrate, but not predictable quality. For example, at 640x480, 500kbps might be enough for a video blog to look good, but an action movie might look bad at the same bitrate. Similarly, it might be too high for a screencast, resulting in a file that is larger than it needs to be.

            If a reliable bitrate is more important than reliable quality, choose video_bitrate. If a reliable visual quality is more important, use quality instead.

            video_bitrate uses two-pass, variable bitrate (VBR) encoding. one_pass encoding may be triggered via the one_pass option, though one_pass VBR encoding is typically of poor quality, and only results in a small speedup, so this is not recommended.

            Also keep in mind that bitrates that are too high or too low are unusable. By default, if you specify a bitrate that is too low, we will automatically correct to an acceptable bitrate. Enable strict mode if you would prefer a job to fail in this situation rather than auto-correcting.
        audio_quality:
          type: integer
          description: >-
            The desired output audio quality, from 1 to 5. Automatically selects an `audio_bitrate` to achieve this quality.

            Quality 1 uses a low audio bitrate, which results in a low sound quality, but small files. Quality 5 results in a high audio bitrate for larger files but higher quality.

            We recommend using 3 for most purposes, or 4-5 when transparent sound quality is desired.
          minimum: 1
          maximum: 5
          default: 3
        audio_bitrate:
          type: integer
          description: >-
            An output bitrate setting, in Kbps. With 2 channel output, this is the total audio bitrate, not the bitrate of each channel, so 128kbps stereo output is encoded at 64kbps per channel. Below 48kbps per channel, quality can start to suffer.

            Beware that if you manually set an `audio_sample_rate`, you need to choose a compatible `audio_bitrate`, or the encoding may fail. By default, we will auto-correct these failues and choose a valid bitrate/sample rate combination. Enable `strict_mode` to avoid this auto-correction.

            For AAC audio, a bitrate lower than 84 will set the AAC profile to `HE-AAC`.
        max_video_bitrate:
          type: integer
          description: >-
            A maximum average bitrate for a movie. Overrides both the quality and video_bitrate settings to ensure that a bitrate doesn't exceed the provided number.

            max_video_bitrate is especially useful when encoding for mobile devices using the quality setting, which autoselects a bitrate. Mobile devices sometimes have fixed bitrate limits; for example, the iPhone 3GS has a bitrate limit of 1500 kbps.

            **Note**: This option does not apply to the VP6 codec. It will be ignored if used with VP6.
          maximum: 100000
        speed:
          type: integer
          description: >-
            A target transcoding speed. Slower transcoding allows for more advanced file compression, while faster transcoding is possible by skipping some advanced compression features. Valid values are 1-5.

            Note: at the moment, *only H.264 output has five speed levels. For VP6 content, 1-2 are a slower mode, and 3-5 are a faster mode. Other video codecs do not support this setting at all.*
          minimum: 1
          maximum: 5
          default: 3
        decoder_bitrate_cap:
          type: integer
          description: >-
            The max bitrate fed to the decoder via a buffer. This setting is typically used only for streaming (HLS or broadcast video).

            Only use this setting if you understand its implications, as it can decrease video quality.
          maximum: 100000
        decoder_buffer_size:
          type: integer
          description: >-
            The size of the buffer fed to the decoder when using a bitrate_cap, expressed in kbps. The buffer_size divided by bitrate_cap represents the size of the buffer in seconds; so if you set bitrate_cap to 1000 and buffer_size to 1000, the buffer is effectively 1.0 second. If bitrate_cap is 500 and buffer_size is 1000, the buffer is 2.0 seconds.

            Only use this setting if you understand its implications, as it can decrease video quality. This should typically only be used for streaming (or for device playback).
          maximum: 100000
        one_pass:
          type: boolean
          description: >-
            By default, we will use two-pass encoding whenever encoding to a target video_bitrate, and one_pass encoding when performing constant quality encoding (which doesn't benefit from a second pass). This option will force one_pass encoding when targeting a specific video_bitrate.

            We highly recommend not forcing one_pass encoding. The first pass in two-pass encoding is faster than the second pass, so going from two-pass encoding to one_pass encoding only results in a 25% encoding speedup, not 50% faster encoding. And two-pass encoding looks significantly better than one_pass encoding.
          default: false
        audio_constant_bitrate:
          type: boolean
          description: >-
            Enable constant bitrate (CBR) mode for audio, when possible. audio_sample_rate may be adjusted for compatibility.

audio_bitrate setting must also be specified when using this option.

Compatible with AAC and MP3 audio codecs. Not compatible when used with the VP6 video_codec.) For MP3 audio, only certain bitrates are compatible with this option: 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320.

Note: The AAC codec does not define a fixed CBR mode, so there are still small variations in bitrate over short time periods. Most software will still report these encodes as VBR.
          default: false
        drm:
          $ref: '#/components/schemas/DRM'
        headers:
          type: object
          description: >-
            HTTP headers to send with your file when we upload it. This feature is currently supported when using S3, GCS and Cloud Files.

            Zencoder supports setting a limited subset of these headers: `Cache-Control`, `Content-Disposition`, `Content-Encoding`, `Content-Type`, `Expires`, `x-amz-acl`, `x-amz-storage-class`, `x-amz-server-side-encryption`, `x-amz-meta-*`, `x-goog-acl` and `x-goog-meta-*`.
        skip:
          $ref: '#/components/schemas/Skip'
    MasterDisplay:
      title: Master Display
      description: Hash of HDR10 output settings
      properties:
        red:
          type: object
          description: Hash of red color volumes for HDR10 output settings
          properties:
            x:
              type: number
              description: Color volume x setting for red (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.7400
            y:
              type: number
              description: Color volume y setting for red (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.8400
        greeen:
          type: object
          description: Hash of green color volumes for HDR10 output settings
          properties:
            x:
              type: number
              description: Color volume x setting for green (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.7400
            y:
              type: number
              description: Color volume y setting for green (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.8400
        blue:
          type: object
          description: Hash of blue color volumes for HDR10 output settings
          properties:
            x:
              type: number
              description: Color volume x setting for blue (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.7400
            y:
              type: number
              description: Color volume y setting for blue (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.8400
        white_point:
          type: object
          description: Hash of white point color volumes for HDR10 output settings
          properties:
            x:
              type: number
              description: Color volume x setting for white point (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.7400
            y:
              type: number
              description: Color volume y setting for white point (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.8400
        luminence:
          type: object
          description: Hash of luminance settings for HDR10 output settings
          properties:
            min:
              type: number
              description: Minimum luminance in nits or candelas per square meter (cd/m2) (for HDR10 outputs)
              minimum: 0.0001
              maximum: 5.0
            max:
              type: number
              description: Maximum luminance in nits or candelas per square meter (cd/m2) (for HDR10 outputs)
              minimum: 5.0
              maximum: 10000.0
    DRM:
      title: DRM
      type: object
      description: Hash of DRM options
      properties:
        method:
          type: string
          description: The Digital Rights Management (DRM) method used to protect content
          enum:
            - cenc
            - playready
        provider:
          type: string
          description: The Digital Rights Management (DRM) provider used. Only required for PlayReady.
        key_id:
          type: string
          description: >-
            '32 hexadecimal characters (with optional dashes for UUID formatting). Identifier of the key to use. This is specified with all bytes in standard (big-endian) order..Some DRM services return key IDs in little-endian order formatted as a GUID; to specify the key in that format see [key_guid]{https://support.brightcove.com/zencoder-encoding-settings-drm#key_guid}.'
        key_guid:
          type: string
          description: >-
            32 hexadecimal characters (with optional dashes for UUID formatting). Identifier of the key to use, in GUID-formatted little-endian order. Some DRM services return key IDs using this formatting. If a `key_id` is not also specified, this will be converted to use as the `key_id`. For specifying the key ID in a standard big-endian binary or UUID format, see `key_id`
        user_key:
          type: string
          description: >-
            32 hexadecimal characters (with optional dashes for UUID formatting). The user key from the DRM provider.
        server_key:
          type: string
          description: >-
            32 hexadecimal characters (with optional dashes for UUID formatting). The server key from the DRM provider.
        media_id:
          type: string
          description: >-
            32 hexadecimal characters (with optional dashes for UUID formatting). Unique identifier for the media.
        content_id:
          type: string
          description: >-
            32 hexadecimal characters (with optional dashes for UUID formatting). Unique identifier for the content.
        content_key:
          type: string
          description: >-
            32 hexadecimal characters (with optional dashes for UUID formatting). Unique identifier for the content.
        schemas:
          type: array
          description: >-
            When using Common Encryption to encrypt an output (or set of outputs), information about the DRM providers is specified as a schema including the schema type, and provider-specific infomration.

            This is generally only specified on playlist outputs for multi-bitrate encoding jobs, but may also be specified for a CENC-encoded output to ensure that output is playable on its own.
          items:
            $ref: '#/components/schemas/Schema'
    Schema:
      title: Schema
      type: object
      properties:
        type:
          type: string
          description: Provider type for this DRM schema.
          enum:
            - widevine
            - playready
            - marlin
        license_acquisition_url:
          type: string
          description: License acquisition URL for Playready CENC DRM schema.
    Skip:
      title: Skip
      description: >-
        An object containing conditions for skipping the output

        **Note**: Due to the nature of video metadata and inconsistencies between video types some source files may have their dimensions read incorrectly during inspection, resulting in conditions being applied or ignored incorrectly.
      properties:
        min_size:
          type: string
          description: >-
            If the source's dimensions are smaller than the requested size, the output will be skipped.

            Dimensions are calculated by mutliplying the height and the width of the source and comparing to the product of provided dimensions.
          example: 640x360
        max_size:
          type: string
          description: >-
            If the source's dimensions are larger than the requested size, the output will be skipped.

            Dimensions are calculated by mutliplying the height and the width of the source and comparing to the product of provided dimensions.
          example: 640x360
        min_duration:
          type: integer
          description: >-
            If the source's duration is shorter than the requested duration, the output will be skipped.

            Duration must be provided in seconds. To skip an output if the source is shorter than 5 minutes, use `300`.
          example: 300
        max_duration:
          type: integer
          description: >-
            If the source's duration is longer than the requested duration, the output will be skipped.

            Duration must be provided in seconds. To skip an output if the source is longer than 10 minutes, use `600`.
          example: 600
        min_audio_bitrate:
          type: integer
          description: >-
            If the source's audio bitrate is less than the specified bitrate (in kbps), the output will be skipped.

            **Source files without an audio track or without a recognizable audio bitrate will ignore this setting.** (See [require_audio](https://support.brightcove.com/zencoder-encoding-settings-conditional-outputs#require-audio) for more options.) To skip an output if the source audio bitrate is less than 128 Kbps, use 128.
          example: 128
        max_audio_bitrate:
          type: integer
          description: >-
            If the source's audio bitrate is greater than the specified bitrate (in kbps), the output will be skipped.

            '**Source files without an audio track or without a recognizable audio bitrate will ignore this setting.** (See [require_audio](https://support.brightcove.com/zencoder-encoding-settings-conditional-outputs#require-audio) for more options.) To skip an output if the source audio bitrate is greater than 160 Kbps, use 160.'
          example: 160
        min_video_bitrate:
          type: integer
          description: >-
            If the source's video bitrate is less than the specified bitrate (in kbps), the output will be skipped.

            '**Source files without a video track or without a recognizable video bitrate will ignore this setting.** (See [require_video](https://support.brightcove.com/zencoder-encoding-settings-conditional-outputs#require-video) for more options.) To skip an output if the source video bitrate is less than 800 Kbps, use 800.'
          example: 800
        max_video_bitrate:
          type: integer
          description: >-
            If the source's video bitrate is greater than the specified bitrate (in kbps), the output will be skipped.

            '**Source files without a video track or without a recognizable video bitrate will ignore this setting.** (See [require_video](https://support.brightcove.com/zencoder-encoding-settings-conditional-outputs#require-video) for more options.) To skip an output if the source video bitrate is greater than 2000 Kbps, use 2000.'
          example: 2000
        require_audio:
          type: boolean
          description: To skip an output if the source does not have an audio track, set this option to true.
        require_video:
          type: boolean
          description: To skip an output if the source does not have an video track, set this option to true.
    CreateJobResponse:
      title: Create Encoding Job Response
      type: object
