openapi: '3.0.0'
x-bc-implicit-head: true
x-bc-implicit-options: true
x-bc-upstream: 'http://backend_server'
info:
  description: API for Zencoder
  version: 2.0.0
  title: Zencoder API
  x-bc-access: public
servers:
  - url: 'https://app.zencoder.com/api/v2'
    variables: {}
tags:
  - name: Jobs
    description: Operations for managing Zencoder encoding jobs.
  - name: Inputs
    description: Operations for getting input details and progress.
  - name: Outputs
    description: Operations for getting output details and progress.
  - name: Accounts
    description: Operations for managing accounts.
  - name: Reports
    description: Operations for getting reports.
paths:
  '/jobs':
    post:
      tags:
        - Jobs
      summary: List the current status for every video on the account
      description: >-
        Encoding jobs are created by sending an HTTP POST request to https://app.zencoder.com/api/v2/jobs. The post body must include two things: the URL of a video to process and your API key. It may also include output settings for the job, including an output destination, notification settings, and transcoding settings.
      operationId: createJob
      security: []
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/ZencoderApiKey'
      requestBody:
        description: >-
          Defines inputs and outputs for a Zencoder encoding job.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobBody'
        required: true
      responses:
        '200':
          description: A list of videos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateJobResponse'
        '403':
          description: Forbidden
        '422':
          description: Invalid query parameters
        '500':
          description: Server error
      deprecated: false
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
components:
  parameters:
    ContentType:
      name: Content-Type
      in: header
      description: 'Content-Type: application/json'
      required: true
      style: simple
      explode: false
      schema:
        type: string
    ZencoderApiKey:
      name: Zencoder-Api-Key
      in: header
      description: Your API key
      required: true
      schema:
        type: string
  schemas:
    CreateJobBody:
      title: Create Encoding Job Body
      type: object
      required:
        - input
      properties:
        api_key:
          type: string
          description: >-
            API key for your Zencoder account (must be included here if not passed as a header, which is the recommended way) - get your API key from [https://app.zencoder.com/api](https://app.zencoder.com/api)
        dynamic_profile_options:
          $ref: #/components/schemas/DynamicProfileOptions
        generate_dynamic_profile:
          type: boolean
          description: >-
            With CAE the number of outputs and parameters of such outputs may change dynamically for each input file. To specify limits on the number of outputs to be generated as well as other profile constraints, CAE job request must also include dynamic_profile_options object. The outputs reserved for CAE use should not include resolution, bitrate, or codec-related parameters. Instead, they should include labels dynamic_profile_rendition. The number of outputs reserved for CAE use must match the number specified as max_renditions in dynamic_profile_options.
        input:
          type: string
          description: >-
            A valid URL to a media file (HTTP/HTTPS, FTP/FTPS, SFTP, Azure, GCS, CF or S3), with or without authentication
          required: true
        region:
          type: string
          description: >-
            The AWS region or Google Compute Engine instance (beta) where Zencoder should process the job
          enum:
            - us
            - europe
            - asia
            - sa
            - australia
            - us-virginia
            - us-oregon
            - us-n-california
            - eu-dublin
            - asia-singapore
            - asia-tokyo
            - sa-saopaulo
            - australia-sydney
          default: us
        test:
          type: boolean
          description: >-
            Enable test mode ("Integration Mode") for a job
          default: false
        private:
          type: boolean
          description: Enable privacy mode for a job
          default: false
        pass_through:
          type: string
          description: Optional information to store alongside this job
        mock:
          type: boolean
          description: Send a mocked job request
          default: false
        grouping:
          type: string
          description: A report grouping for this job
        aspera_transfer_policy:
          type: string
          description: >-
            How to allocate available bandwidth for Aspera file transfers
          default: fair
        transfer_minimum_rate:
          type: integer
          description: A targeted rate in Kbps for data transfer minimums
          default: 1800
        transfer_maximum_rate:
          type: integer
          description: A targeted rate in Kbps for data transfer maximums
          default: 250000
        credentials:
          type: string
          description: References saved credentials by a nickname
        notifications:
          description: >-
            Array of notification destination objects or strings - notifications defined here are for job-level events.  A notification will be sent to the destination when selected event occurs. You can use a simple string with a url: &quot;http://log:pass@httpbin.org/post&quot;, or you can use an object.  <br> Retry strategy: In the event of a failed request to send a notification, the default retry strategy is to retry 50 times with an exponential delay between attempts: <br>
            `max_retry_times = 50` <br> `delay_delta_s = 5` <br>
            `next_retry = now_s + retry_count * delay_delta_s`
          items:
            oneOf:
              - $ref: '#/components/schemas/Notification'
              - type: string
                description: A URL or email address to send notifications to
          type: array
        outputs:
          type: array
          description: Array of output specifications
          items:
            $ref: #/components/schemas/Output
    DynamicProfileOptions:
      title: Dynamic Profile Options
      type: object
      description: >-
         hash of options for CAE (Context Aware Encoding) jobs. With CAE the number of outputs and parameters of such outputs may change dynamically for each input file. The dynamic_profile_options settings define the way renditions should be created. See [CAE Settings](https://support.brightcove.com/zencoder-cae-settings) for details. You must also set generate_dynamic_profile equal to true to use this feature.
      properties:
        min_renditions:
          type: integer
          description: The minium number of renditions to generate.
          minimum: 1
          maximum: 15
          default: 1
        max_renditions:
          type: integer
          description: The maximum number of renditions to generate.
          minimum: 1
          maximum: 15
          default: 8
        min_resolution:
          type: object
          description: Minimum resolution to be considered for the ladder.
    Notification:
      properties:
        url:
          description: A valid HTTP or HTTPS URL to notify, optionally including HTTP Auth credential
          type: string
        format:
          type: string
          description: A format and content type for notifications
          enum:
            - json
            - xml
          headers:
            type: object
            description: >-
              By default, HTTP notifications are sent with an HTTP Content-Type, along with a User-Agent; if your application requires additional headers, they can be specified here
      title: notification
      type: object
    Output:
      title: Output Object
      type: object
      properties:
        type:
          type: string
          description: The type of file to output
          enum:
            - standard
            - segmented
            - playlist
            - transfer-only
          default: standard
        label:
          type: string
          description: An optional label for this output - must be unique for the job
        url:
          type: string
          description: A S3, Cloud Files, GCS, FTP, FTPS, SFTP, Aspera, Azure or HTTP URL where Zencoder will put the transcoded file
        secondary_url:
          type: string
          description: A S3, Cloud Files, GCS, FTP, FTPS, SFTP, Aspera, Azure or HTTP URL where Zencoder will put the transcoded file
        base_url:
          type: string
          description: A base S3, Cloud Files, GCS, FTP, FTPS, SFTP, Azure, or Aspera directory URL where Zencoder put the transcoded file, without a filename
        filename:
          type: string
          description: The filename of a finished file
        package_filename:
          type: string
          description: The filename of a packaged output
        package_format:
          type: string
          description: Zip/packaging format to use for the output file(s)
          enum:
            - zip
            - tar
        device_profile:
          type: string
          description: A device profile to use for mobile device compatibility
          enum:
            - mobile/advanced
            - mobile/baseline
            - mobile/baseline
            - v1/mobile/advanced
            - v1/mobile/baseline
            - v1/mobile/legacy
            - v2/mobile/advanced
            - v2/mobile/baseline
            - v2/mobile/legacy
        strict:
          type: boolean
          description: Enable strict mode
          default: false
        master_display:
          $ref: #/components/schemas/MasterDisplay
        max_content_light_level:
          type: number
          description: >-
            Maximum light level for the content as a whole nits or candelas per square meter (cd/m2) - integer values (for HDR10 outputs)
          minimum: 0
          maximum: 10000.0
        max_frame_average_light_level:
          type: number
          description: >-
            Maximum average light level for content frames nits or candelas per square meter (cd/m2) - integer values. Although values up to 10000 are allowed, values in the 100-200 range will generally produce the best results (for HDR10 outputs)
          minimum: 5.0
          maximum: 10000.0
        skip_audio:
          type: boolean
          description: Do not output a audio track
          default: false
        skip_video:
          type: boolean
          description: Do not output a video track
          default: false
        source:
          type: string
          description: References a label on another job and uses the video created by that output for processing instead of the input file
        credentials:
          type: string
          description: References saved credentials by a nickname
        generate_md5_checksum:
          type: boolean
          description: Generate an MD5 checksum of the output file
          default: false
        parallel_upload_limit:
          type: integer
          description: >-
            The maximum number of simultaneous uploads to attempt - defaults: `30` for S3, `10` for other destinations
        drm:
          $ref: #/components/schemas/drm
    MasterDisplay:
      title: Master Display
      description: Hash of HDR10 output settings
      properties:
        red:
          type: object
          description: Hash of red color volumes for HDR10 output settings
          properties:
            x:
              type: number
              description: Color volume x setting for red (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.7400
            y:
              type: number
              description: Color volume y setting for red (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.8400
        greeen:
          type: object
          description: Hash of green color volumes for HDR10 output settings
          properties:
            x:
              type: number
              description: Color volume x setting for green (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.7400
            y:
              type: number
              description: Color volume y setting for green (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.8400
        blue:
          type: object
          description: Hash of blue color volumes for HDR10 output settings
          properties:
            x:
              type: number
              description: Color volume x setting for blue (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.7400
            y:
              type: number
              description: Color volume y setting for blue (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.8400
        white_point:
          type: object
          description: Hash of white point color volumes for HDR10 output settings
          properties:
            x:
              type: number
              description: Color volume x setting for white point (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.7400
            y:
              type: number
              description: Color volume y setting for white point (for HDR10 outputs)
              minimum: 0.0001
              maximum: 0.8400
        luminence:
          type: object
          description: Hash of luminance settings for HDR10 output settings
          properties:
            min:
              type: number
              description: Minimum luminance in nits or candelas per square meter (cd/m2) (for HDR10 outputs)
              minimum: 0.0001
              maximum: 5.0
            max:
              type: number
              description: Maximum luminance in nits or candelas per square meter (cd/m2) (for HDR10 outputs)
              minimum: 5.0
              maximum: 10000.0
    DRM:
      title: DRM
      type: object
      description: Hash of DRM options
      properties:
        method:
          type: string
          description: The Digital Rights Management (DRM) method used to protect content
          enum:
            - cenc
            - playready
        provider:
          type: string
          description: The Digital Rights Management (DRM) provider used. Only required for PlayReady.
        key_id:
          type: string
          description: >-
            32 hexadecimal characters (with optional dashes for UUID formatting). Identifier of the key to use. This is specified with all bytes in standard (big-endian) order..Some DRM services return key IDs in little-endian order formatted as a GUID; to specify the key in that format see [key_guid]{https://support.brightcove.com/zencoder-encoding-settings-drm#key_guid}.
        key_guid:
          type: string
          description: >-
            32 hexadecimal characters (with optional dashes for UUID formatting). Identifier of the key to use, in GUID-formatted little-endian order. Some DRM services return key IDs using this formatting. If a `key_id` is not also specified, this will be converted to use as the `key_id`. For specifying the key ID in a standard big-endian binary or UUID format, see `key_id`
        user_key:
          type: string
          description: >-
            32 hexadecimal characters (with optional dashes for UUID formatting). The user key from the DRM provider.
        server_key:
          type: string
          description: >-
            32 hexadecimal characters (with optional dashes for UUID formatting). The server key from the DRM provider.
        media_id:
          type: string
          description: >-
            32 hexadecimal characters (with optional dashes for UUID formatting). Unique identifier for the media.
        content_id:
          type: string
          description: >-
            32 hexadecimal characters (with optional dashes for UUID formatting). Unique identifier for the content.
        content_key:
          type: string
          description: >-
            32 hexadecimal characters (with optional dashes for UUID formatting). Unique identifier for the content.
        schemas:
          type: array
          description: >-
            When using Common Encryption to encrypt an output (or set of outputs), information about the DRM providers is specified as a schema including the schema type, and provider-specific infomration.

            This is generally only specified on playlist outputs for multi-bitrate encoding jobs, but may also be specified for a CENC-encoded output to ensure that output is playable on its own.
          items:
            $ref: #/components/schemas/Schema
    Schema:
      title: Schema
      type: object
      properties:
        type:
          type: string
          description: Provider type for this DRM schema.
          enum:
            - widevine
            - playready
            - marlin
        license_acquisition_url:
          type: string
          description: License acquisition URL for Playready CENC DRM schema.
    CreateJobResponse:
      title: Create Encoding Job Response
      type: object
